name: Falcon Hybrid Analysis Scan

on:
  repository_dispatch:
    types: [pdf-detected]

jobs:
  falcon-scan:
    runs-on: ubuntu-latest
    outputs:
      scan_result: ${{ steps.check-result.outputs.scan_result }}
      scan_url: ${{ steps.check-result.outputs.scan_url }}
      threat_detected: ${{ steps.check-result.outputs.threat_detected }}
      pdf_path: ${{ github.event.client_payload.pdf_path }}
      pdf_year: ${{ github.event.client_payload.pdf_year }}
      pdf_name: ${{ github.event.client_payload.pdf_name }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: development
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Submit PDF for scanning
        id: submit-scan
        run: |
          echo "Preparing to scan file: ${{ github.event.client_payload.pdf_path }}"
          
          # Python script to submit the PDF to Hybrid Analysis and get the scan results
          python - <<EOF
          import requests
          import time
          import json
          import os
          import base64
          
          # API Configuration
          API_KEY = '${{ secrets.HYBRID_ANALYSIS_API_KEY }}'
          API_URL = 'https://www.hybrid-analysis.com/api/v2'
          
          # File path
          pdf_path = '${{ github.event.client_payload.pdf_path }}'
          
          # Read the PDF file
          with open(pdf_path, 'rb') as file:
              file_content = file.read()
          
          # Setup headers for API request
          headers = {
              'api-key': API_KEY,
              'User-Agent': 'Falcon Sandbox'
          }
          
          # Submit the file for analysis
          files = {'file': (os.path.basename(pdf_path), file_content)}
          
          # Submit options
          data = {
              'environment_id': 300,  # Windows 10 64-bit environment
              'comment': 'Scan from GitHub Actions',
              'allow_community_access': 'false',
              'experimental_anti_evasion': 'true',
              'duration': 30
          }
          
          print("Submitting file for analysis...")
          submit_response = requests.post(
              f"{API_URL}/submit/file",
              headers=headers,
              files=files,
              data=data
          )
          
          if submit_response.status_code != 200:
              print(f"Error submitting file: {submit_response.text}")
              exit(1)
          
          # Get the job ID from the response
          job_id = submit_response.json()['job_id']
          print(f"Submission successful. Job ID: {job_id}")
          
          # Write the job ID to a file that can be accessed in the next step
          with open('job_id.txt', 'w') as f:
              f.write(job_id)
          
          # Get the analysis URL
          analysis_url = f"https://www.hybrid-analysis.com/sample/{job_id}"
          print(f"Analysis URL: {analysis_url}")
          
          # Set the URL for the GitHub Action output
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"scan_job_id={job_id}\n")
              f.write(f"scan_url={analysis_url}\n")
          EOF
      
      - name: Wait for scan to complete and check results
        id: check-result
        run: |
          echo "Checking scan results..."
          
          # Python script to poll for results
          python - <<EOF
          import requests
          import time
          import json
          import os
          
          # API Configuration
          API_KEY = '${{ secrets.HYBRID_ANALYSIS_API_KEY }}'
          API_URL = 'https://www.hybrid-analysis.com/api/v2'
          
          # Read the job ID from the previous step
          with open('job_id.txt', 'r') as f:
              job_id = f.read().strip()
          
          # Setup headers for API request
          headers = {
              'api-key': API_KEY,
              'User-Agent': 'Falcon Sandbox'
          }
          
          # Poll for the scan results
          max_attempts = 30
          attempt = 0
          scan_complete = False
          threat_detected = False
          scan_result = {}
          
          print(f"Polling for scan results for job ID: {job_id}")
          
          while attempt < max_attempts and not scan_complete:
              attempt += 1
              print(f"Attempt {attempt} of {max_attempts}...")
              
              try:
                  # Get the report state
                  report_response = requests.get(
                      f"{API_URL}/report/{job_id}/state",
                      headers=headers
                  )
                  
                  if report_response.status_code != 200:
                      print(f"Error checking report state: {report_response.text}")
                      time.sleep(20)
                      continue
                  
                  state = report_response.json().get('state', '')
                  if state == 'SUCCESS':
                      scan_complete = True
                      print("Scan completed successfully!")
                      
                      # Get the full report summary
                      summary_response = requests.get(
                          f"{API_URL}/report/{job_id}/summary",
                          headers=headers
                      )
                      
                      if summary_response.status_code == 200:
                          scan_result = summary_response.json()
                          
                          # Check for threats
                          verdict = scan_result.get('verdict', '')
                          threat_score = scan_result.get('threat_score', 0)
                          
                          print(f"Verdict: {verdict}")
                          print(f"Threat Score: {threat_score}")
                          
                          if verdict.lower() in ['malicious', 'suspicious'] or threat_score > 50:
                              threat_detected = True
                              print("WARNING: Potential threat detected!")
                          else:
                              print("No threats detected.")
                      else:
                          print(f"Error getting report summary: {summary_response.text}")
                  elif state == 'ERROR':
                      scan_complete = True
                      print("Scan encountered an error.")
                  else:
                      print(f"Scan in progress. Current state: {state}")
                      time.sleep(20)
              except Exception as e:
                  print(f"Error polling results: {str(e)}")
                  time.sleep(20)
          
          # Write the results for the GitHub Action output
          scan_url = f"https://www.hybrid-analysis.com/sample/{job_id}"
          with open(os.environ['GITHUB_OUTPUT'], 'a') as f:
              f.write(f"scan_result={json.dumps(scan_result)}\n")
              f.write(f"scan_url={scan_url}\n")
              f.write(f"threat_detected={'true' if threat_detected else 'false'}\n")
          
          # Save the scan results as a JSON file
          with open('scan_results.json', 'w') as f:
              json.dump(scan_result, f, indent=2)
          
          if not scan_complete:
              print("Timed out waiting for scan results.")
              exit(1)
          EOF
      
      - name: Save scan results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: falcon-scan-results
          path: scan_results.json
          retention-days: 90
      
      - name: Check for threats
        run: |
          echo "Scan URL: ${{ steps.check-result.outputs.scan_url }}"
          echo "Threat Detected: ${{ steps.check-result.outputs.threat_detected }}"
          
          if [[ "${{ steps.check-result.outputs.threat_detected }}" == "true" ]]; then
            echo "::warning::Potential security threat detected in PDF file!"
          else
            echo "No threats detected. Proceeding with markdown conversion."
          fi
      
      - name: Trigger Gemini Markdown Conversion
        if: steps.check-result.outputs.threat_detected == 'false'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: pdf-clean
          client-payload: '{"pdf_path": "${{ github.event.client_payload.pdf_path }}", "pdf_year": "${{ github.event.client_payload.pdf_year }}", "pdf_name": "${{ github.event.client_payload.pdf_name }}", "scan_url": "${{ steps.check-result.outputs.scan_url }}"}'
