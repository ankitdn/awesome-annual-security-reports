name: Gemini Markdown Conversion

on:
  workflow_dispatch:
    inputs:
      pdf_file_path:
        description: 'Path to the PDF file'
        required: true
        type: string
      year_folder:
        description: 'Year folder'
        required: true
        type: string
      base_filename:
        description: 'Base filename without extension'
        required: true
        type: string
      scan_url:
        description: 'Falcon Hybrid-Analysis scan URL'
        required: true
        type: string

jobs:
  convert-to-markdown:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: ${{ github.ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests PyPDF2 google-generativeai
        
      - name: Convert PDF to Markdown with Gemini 2.0 Flash
        id: gemini-conversion
        run: |
          PDF_PATH="${{ inputs.pdf_file_path }}"
          YEAR_FOLDER="${{ inputs.year_folder }}"
          BASE_FILENAME="${{ inputs.base_filename }}"
          
          # Read the AI prompt template
          AI_PROMPT=$(cat AI_PROMPT_MARKDOWN_CONVERT.md)
          
          # Read AI prompt version from commit notes
          AI_PROMPT_VERSION=$(git log -1 --pretty=%B -- AI_PROMPT_MARKDOWN_CONVERT.md | grep -oP 'Version: \K[0-9.]+' || echo "1.0")
          
          # Create output directory if it doesn't exist
          OUTPUT_DIR="Markdown Conversions/$YEAR_FOLDER"
          mkdir -p "$OUTPUT_DIR"
          OUTPUT_FILE="$OUTPUT_DIR/$BASE_FILENAME.md"
          
          echo "Converting PDF to Markdown using Gemini 2.0 Flash..."
          echo "Input PDF: $PDF_PATH"
          echo "Output Markdown: $OUTPUT_FILE"
          
          python - <<EOF
          import os
          import sys
          import requests
          import PyPDF2
          import google.generativeai as genai
          import time
          
          # Configure Gemini API
          gemini_api_key = '${{ secrets.GEMINI_API_KEY }}'
          genai.configure(api_key=gemini_api_key)
          
          # Extract text from PDF
          def extract_text_from_pdf(pdf_path):
              try:
                  with open(pdf_path, 'rb') as file:
                      reader = PyPDF2.PdfReader(file)
                      text = ""
                      for page in reader.pages:
                          text += page.extract_text() + "\n\n"
                      return text
              except Exception as e:
                  print(f"Error extracting text from PDF: {str(e)}")
                  return None
          
          # Convert to markdown using Gemini
          def convert_to_markdown(pdf_text, prompt_template, model_name="gemini-2.0-flash"):
              try:
                  # Format the prompt with the PDF text
                  full_prompt = prompt_template + "\n\nHere is the PDF content to convert:\n\n" + pdf_text
                  
                  # Set up the model
                  model = genai.GenerativeModel(model_name)
                  
                  # Generate the markdown
                  response = model.generate_content(full_prompt)
                  
                  if hasattr(response, 'text'):
                      return response.text, model_name
                  else:
                      print("Invalid response format from Gemini API")
                      return None, model_name
              except Exception as e:
                  print(f"Error converting to markdown with {model_name}: {str(e)}")
                  return None, model_name
          
          # Main process
          try:
              # Read the PDF file
              pdf_path = '${{ github.event.client_payload.pdf_file_path }}'
              pdf_text = extract_text_from_pdf(pdf_path)
              
              if not pdf_text:
                  sys.exit(1)
              
              # Get AI prompt template
              prompt_template = '''${{ env.AI_PROMPT }}'''
              
              # Try with Gemini 2.0 Flash first
              markdown_content, model_used = convert_to_markdown(pdf_text, prompt_template)
              
              # If Flash fails, try Flash Lite
              if not markdown_content:
                  print("Gemini 2.0 Flash failed. Trying Gemini 2.0 Flash Lite...")
                  markdown_content, model_used = convert_to_markdown(pdf_text, prompt_template, "gemini-2.0-flash-lite")
              
              if markdown_content:
                  # Write the markdown to file
                  output_file = '${{ env.OUTPUT_FILE }}'
                  with open(output_file, 'w') as f:
                      f.write(markdown_content)
                  
                  # Set outputs for use in GitHub Actions
                  with open(os.environ['GITHUB_ENV'], 'a') as env_file:
                      env_file.write(f"GEMINI_MODEL_USED={model_used}\n")
                  
                  print(f"Successfully converted PDF to markdown using {model_used}")
                  sys.exit(0)
              else:
                  print("Failed to convert PDF to markdown with both Gemini models")
                  sys.exit(1)
                  
          except Exception as e:
              print(f"Unexpected error: {str(e)}")
              sys.exit(1)
          EOF
          
          # Check if conversion was successful
          if [ $? -eq 0 ]; then
            echo "Conversion successful using $GEMINI_MODEL_USED"
            echo "gemini_model_used=$GEMINI_MODEL_USED" >> $GITHUB_OUTPUT
            echo "conversion_success=true" >> $GITHUB_OUTPUT
          else
            echo "Conversion failed."
            echo "conversion_success=false" >> $GITHUB_OUTPUT
          fi
        shell: bash
        env:
          AI_PROMPT: ""
          OUTPUT_FILE: ${{ format('Markdown Conversions/{0}/{1}.md', inputs.year_folder, inputs.base_filename) }}

      - name: Commit and push markdown file
        if: steps.gemini-conversion.outputs.conversion_success == 'true'
        run: |
          YEAR_FOLDER="${{ inputs.year_folder }}"
          BASE_FILENAME="${{ inputs.base_filename }}"
          OUTPUT_FILE="Markdown Conversions/$YEAR_FOLDER/$BASE_FILENAME.md"
          GEMINI_MODEL="${{ steps.gemini-conversion.outputs.gemini_model_used }}"
          
          # Get AI prompt version from commit notes
          AI_PROMPT_VERSION=$(git log -1 --pretty=%B -- AI_PROMPT_MARKDOWN_CONVERT.md | grep -oP 'Version: \K[0-9.]+' || echo "1.0")
          
          # Configure Git
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Commit the file
          git add "$OUTPUT_FILE"
          git commit -m "Convert PDF to Markdown: $BASE_FILENAME [AI Prompt V$AI_PROMPT_VERSION Model $GEMINI_MODEL]"
          git push
        shell: bash

      - name: Upload markdown as artifact
        if: steps.gemini-conversion.outputs.conversion_success == 'true'
        uses: actions/upload-artifact@v3
        with:
          name: markdown-conversion
          path: ${{ format('Markdown Conversions/{0}/{1}.md', inputs.year_folder, inputs.base_filename) }}
