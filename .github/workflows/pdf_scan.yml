name: PDF Security Scanner

on:
  push:
    branches: [ development ]
    paths:
      - 'Annual Security Reports/**/*.pdf'
  pull_request:
    branches: [ development ]
    paths:
      - 'Annual Security Reports/**/*.pdf'

jobs:
  scan-pdfs:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests
          
      - name: Identify changed PDF files
        id: changed-files
        run: |
          # Compare with previous commit to find changed/added files, ignoring deleted files
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            # For pull requests, compare with the base branch
            BASE_SHA=${{ github.event.pull_request.base.sha }}
          else
            # For pushes, compare with the previous commit
            BASE_SHA=$(git rev-parse HEAD^)
          fi
          
          # Get all changed or added files, filter for PDFs only, ignoring deleted files
          CHANGED_FILES=$(git diff --name-status $BASE_SHA HEAD | grep -E '^[AM].*\.pdf$' | awk '{print $2}' | grep -E '^Annual Security Reports/')
          
          # Check if there are any PDF files to process
          if [ -z "$CHANGED_FILES" ]; then
            echo "No PDF files were added or modified. Skipping scan."
            echo "pdf_files=" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Create a list of PDF files for output
          echo "pdf_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Display files for logging
          echo "Found the following PDF files to scan:"
          echo "$CHANGED_FILES"
          
      - name: Create temporary API key file
        if: ${{ steps.changed-files.outputs.pdf_files != '' }}
        run: |
          # Store API key temporarily in a file as required by the script
          echo "${{ secrets.HYBRID_ANALYSIS_API_KEY }}" > falcon.txt
          chmod 600 falcon.txt
          
      - name: Create PDF scanner script
        if: ${{ steps.changed-files.outputs.pdf_files != '' }}
        run: |
          cat > scan_pdf.py << 'EOL'
          #!/usr/bin/env python3
          """
          Hybrid Analysis PDF Scanner
          This script submits a PDF file to the Hybrid Analysis v2 API and checks for threats.
          Usage: python scan_pdf.py path/to/file.pdf
          """

          import os
          import sys
          import time
          import json
          import requests
          import logging
          from datetime import datetime

          # Configure logging to console only
          console_handler = logging.StreamHandler()
          console_handler.setLevel(logging.INFO)
          console_formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
          console_handler.setFormatter(console_formatter)

          # Configure root logger
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s',
              handlers=[console_handler]
          )

          def read_api_key(filename="falcon.txt"):
              """Read the API key from the specified file."""
              try:
                  file_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), filename)
                  logging.info(f"Reading API key from: {file_path}")
                  
                  with open(file_path, 'r') as f:
                      api_key = f.read().strip()
                      if not api_key:
                          logging.error(f"API key file '{file_path}' is empty")
                          sys.exit(1)
                      logging.info(f"API key found. Length: {len(api_key)} characters")
                      return api_key
              except FileNotFoundError:
                  logging.error(f"API key file '{file_path}' not found")
                  sys.exit(1)
              except Exception as e:
                  logging.error(f"Error reading API key: {str(e)}")
                  sys.exit(1)

          def submit_file(file_path, api_key):
              """Submit a file to the Hybrid Analysis v2 API."""
              logging.info(f"Submitting file: {file_path}")
              
              # Verify file exists and check size
              file_size = os.path.getsize(file_path)
              logging.info(f"File size: {file_size} bytes ({file_size / (1024*1024):.2f} MB)")
              
              url = "https://www.hybrid-analysis.com/api/v2/submit/file"
              logging.info(f"API endpoint: {url}")
              
              headers = {
                  "api-key": api_key,
                  "User-Agent": "Hybrid Analysis Script",
                  "Accept": "application/json"
              }
              
              # Check file content type
              import mimetypes
              mime_type = mimetypes.guess_type(file_path)[0]
              logging.info(f"File MIME type: {mime_type}")
              
              with open(file_path, 'rb') as f:
                  files = {'file': (os.path.basename(file_path), f)}
                  
                  # Using Windows 10 64-bit (environment_id=110) as default environment
                  data = {
                      "environment_id": "110",  # Windows 10 64-bit
                      "comment": "Submitted via GitHub Actions for analysis"
                  }
                  
                  try:
                      logging.info("Sending API request...")
                      response = requests.post(url, headers=headers, files=files, data=data)
                      logging.info(f"Response status code: {response.status_code}")
                      
                      response.raise_for_status()
                      return response.json()
                  except requests.exceptions.RequestException as e:
                      logging.error(f"Error submitting file: {e}")
                      if hasattr(e, 'response') and e.response:
                          try:
                              err_json = e.response.json()
                              logging.error(f"Error details: {json.dumps(err_json)}")
                          except json.JSONDecodeError:
                              logging.error(f"Error response: {e.response.text}")
                      
                      # Try with a different API endpoint structure - quick scan
                      alt_url = "https://www.hybrid-analysis.com/api/v2/quick-scan/file"
                      logging.info(f"Trying alternative API endpoint: {alt_url}")
                      
                      try:
                          with open(file_path, 'rb') as alt_f:
                              alt_data = {"scan_type": "all"}
                              response = requests.post(alt_url, headers=headers, files={'file': (os.path.basename(file_path), alt_f)}, data=alt_data)
                              logging.info(f"Alternative response status code: {response.status_code}")
                              
                              if response.status_code == 200:
                                  return response.json()
                              else:
                                  logging.error(f"Alternative endpoint failed: {response.text}")
                      except Exception as alt_e:
                          logging.error(f"Alternative endpoint error: {alt_e}")
                          
                      # Try one more time with submit/file-for-analysis endpoint
                      try:
                          third_url = "https://www.hybrid-analysis.com/api/v2/submit/file-for-analysis"
                          logging.info(f"Trying third API endpoint: {third_url}")
                          with open(file_path, 'rb') as third_f:
                              third_data = {
                                  "environment_id": "110",  # Windows 10 64-bit
                                  "analysis_type": "file",
                                  "priority": "0"
                              }
                              
                              response = requests.post(third_url, headers=headers, files={'file': (os.path.basename(file_path), third_f)}, data=third_data)
                              logging.info(f"Third endpoint response status code: {response.status_code}")
                              
                              if response.status_code == 200:
                                  return response.json()
                              else:
                                  logging.error(f"Third endpoint failed: {response.text}")
                      except Exception as third_e:
                          logging.error(f"Third endpoint error: {third_e}")
                      
                      return None

          def check_report_status(job_id, api_key):
              """Check the status of a submitted analysis job."""
              url = f"https://www.hybrid-analysis.com/api/v2/report/{job_id}/summary"
              
              headers = {
                  "api-key": api_key,
                  "User-Agent": "Hybrid Analysis Script",
                  "Accept": "application/json"
              }
              
              try:
                  response = requests.get(url, headers=headers)
                  
                  if response.status_code != 200:
                      return None
                  
                  return response.json()
              except requests.exceptions.RequestException:
                  return None

          def scan_pdf(file_path):
              """Scan a PDF file with Hybrid Analysis."""
              logging.info(f"Processing file: {file_path}")
              
              # Validate file exists
              if not os.path.isfile(file_path):
                  logging.error(f"File '{file_path}' not found")
                  return False
              
              # Check file permissions
              try:
                  with open(file_path, 'rb') as f:
                      pass
              except PermissionError:
                  logging.error(f"Permission denied: Cannot read file '{file_path}'")
                  return False
              
              # Read API key from file
              api_key = read_api_key()
              
              # Submit file for analysis
              submission = submit_file(file_path, api_key)
              
              if not submission:
                  logging.error("Failed to get response from submission API.")
                  return False
                  
              # Handle different response formats
              if 'job_id' not in submission:
                  logging.error("Failed to get job ID from submission.")
                  
                  # Check for alternative IDs or SHA256
                  if 'sha256' in submission:
                      logging.info(f"SHA256 hash found: {submission['sha256']}")
                      logging.info(f"You can check results at: https://www.hybrid-analysis.com/sample/{submission['sha256']}")
                      
                  if 'scan_id' in submission:
                      job_id = submission['scan_id']
                      logging.info(f"Using scan_id as job_id for polling")
                  else:
                      return False
              else:
                  job_id = submission['job_id']
                  logging.info(f"File submitted successfully. Job ID: {job_id}")
              
              # Poll for results
              logging.info("Waiting for analysis to complete...")
              max_attempts = 10
              attempt = 0
              
              while attempt < max_attempts:
                  attempt += 1
                  time.sleep(30)  # Wait 30 seconds between status checks in GitHub Actions
                  
                  report = check_report_status(job_id, api_key)
                  
                  if not report:
                      logging.info(f"Attempt {attempt}/{max_attempts}: No report yet")
                      continue
                  
                  status = report.get('state', '')
                  
                  if status == 'SUCCESS':
                      logging.info("Analysis complete!")
                      
                      # Check for threats
                      threat_score = report.get('threat_score', 0)
                      verdict = report.get('verdict', 'Unknown')
                      
                      logging.info(f"Results for {os.path.basename(file_path)}:")
                      logging.info(f"  Threat Score: {threat_score}/100")
                      logging.info(f"  Verdict: {verdict}")
                      
                      # Print any detected threats
                      if 'threats' in report and report['threats']:
                          logging.info("Detected Threats:")
                          for threat in report['threats']:
                              logging.info(f"  - {threat}")
                      
                      # Print report URL
                      if 'sha256' in report:
                          report_url = f"https://www.hybrid-analysis.com/sample/{report['sha256']}"
                          logging.info(f"Full report: {report_url}")
                      
                      return True
                  
                  elif status == 'ERROR':
                      error_msg = report.get('error', 'Unknown error')
                      logging.error(f"Analysis failed: {error_msg}")
                      return False
                  
                  elif status == 'IN_PROGRESS':
                      logging.info(f"Attempt {attempt}/{max_attempts}: Analysis in progress")
                  
                  else:
                      logging.info(f"Status: {status}")
              
              logging.warning("Timeout waiting for analysis to complete.")
              if 'sha256' in submission:
                  logging.info(f"You can check status at: https://www.hybrid-analysis.com/sample/{submission['sha256']}")
              elif job_id:
                  logging.info(f"Job ID: {job_id}")
              
              return False

          if __name__ == "__main__":
              if len(sys.argv) != 2:
                  print(f"Usage: {sys.argv[0]} <pdf_file_path>")
                  sys.exit(1)
              
              file_path = sys.argv[1].strip("'\"")  # Remove any quotes that might be present
              
              # Expand path to absolute
              file_path = os.path.abspath(file_path)
              
              try:
                  success = scan_pdf(file_path)
                  sys.exit(0 if success else 1)
              except KeyboardInterrupt:
                  logging.error("Process interrupted.")
                  sys.exit(0)
              except Exception as e:
                  logging.error(f"Error: {str(e)}")
                  sys.exit(1)
          EOL
          chmod +x scan_pdf.py
          
      - name: Scan PDF files
        if: ${{ steps.changed-files.outputs.pdf_files != '' }}
        run: |
          echo "${{ steps.changed-files.outputs.pdf_files }}" | while read pdf_file; do
            if [ -f "$pdf_file" ]; then
              echo "Scanning file: $pdf_file"
              python scan_pdf.py "$pdf_file"
              echo "----------------------------------------------------"
            else
              echo "File no longer exists: $pdf_file (may have been deleted in a later commit)"
            fi
          done
          
      - name: Clean up sensitive files
        if: always()
        run: |
          # Clean up the API key file
          [ -f "falcon.txt" ] && rm -f falcon.txt
          # Clean up any other potentially sensitive files
          [ -f "scan_pdf.py" ] && rm -f scan_pdf.py
