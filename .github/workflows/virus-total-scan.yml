name: VirusTotal Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Reports
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Just enough to see the changes
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Find changed files
        id: find-files
        run: |
          # Get only renamed, added, or modified files in the push
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Count for logging
          COUNT=$(git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" | wc -l || echo 0)
          
          echo "Found $COUNT changed security report files"
          
          # Show the files found
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" || echo "No files found"

      - name: Scan changed files with VirusTotal
        if: env.CHANGED_FILES != ''
        env:
          VIRUS_TOTAL_API_KEY: ${{ secrets.VIRUS_TOTAL_API_KEY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > scan.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import requests
          import json
          import hashlib
          import base64
          
          # Constants
          API_BASE_URL = "https://www.virustotal.com/api/v3"
          
          def calculate_file_hash(file_path):
              """Calculate SHA256 hash of a file"""
              sha256_hash = hashlib.sha256()
              with open(file_path, "rb") as f:
                  for chunk in iter(lambda: f.read(4096), b""):
                      sha256_hash.update(chunk)
              return sha256_hash.hexdigest()
          
          def scan_file(file_path, api_key):
              """Scan a file with VirusTotal and create annotation with results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  print(f"Error: File not found: {file_path}")
                  return False
              
              try:
                  # Setup API headers
                  headers = {
                      "x-apikey": api_key,
                      "User-Agent": "VirusTotal GitHub Action",
                      "Accept": "application/json"
                  }
                  
                  # Get file size (in MB) for logging
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  file_size_bytes = os.path.getsize(file_path)
                  print(f"File: {os.path.basename(file_path)} ({file_size_mb:.2f} MB)")
                  
                  # Check file size limit (VirusTotal has a 32MB limit for free API, 650MB for premium)
                  if file_size_bytes > 32 * 1024 * 1024:
                      print(f"Warning: File size ({file_size_mb:.2f} MB) exceeds free API limit (32 MB)")
                      print("Attempting upload anyway - may require premium API key")
                  
                  # Calculate file hash first to check if it's already been scanned
                  file_hash = calculate_file_hash(file_path)
                  print(f"File SHA256: {file_hash}")
                  
                  # First, check if file has been scanned before
                  print("Checking if file has been scanned before...")
                  lookup_response = requests.get(
                      f"{API_BASE_URL}/files/{file_hash}",
                      headers=headers,
                      timeout=30
                  )
                  
                  scan_id = None
                  existing_scan = False
                  
                  if lookup_response.status_code == 200:
                      print("File found in VirusTotal database, using existing scan results")
                      existing_scan = True
                      scan_data = lookup_response.json()
                  elif lookup_response.status_code == 404:
                      print("File not found in database, uploading for new scan...")
                      
                      # Submit file for scanning
                      print("Submitting file for scan...")
                      with open(file_path, 'rb') as f:
                          files = {"file": (os.path.basename(file_path), f, "application/octet-stream")}
                          
                          # Submit the file
                          response = requests.post(
                              f"{API_BASE_URL}/files",
                              headers=headers,
                              files=files,
                              timeout=300  # 5-minute timeout for upload
                          )
                      
                      if response.status_code != 200:
                          print(f"Error: File upload failed with status {response.status_code}")
                          print(f"Response: {response.text}")
                          return False
                      
                      # Get the scan ID
                      upload_result = response.json()
                      scan_id = upload_result.get('data', {}).get('id')
                      
                      if not scan_id:
                          print("Error: No scan ID in upload response")
                          return False
                      
                      print(f"File uploaded successfully. Analysis ID: {scan_id}")
                      
                      # Wait for scan to complete
                      print("Waiting for scan to complete...")
                      
                      # Poll for results - VirusTotal can take a while
                      wait_times = [10, 20, 30, 60, 120]  # Total: 240 seconds (4 minutes)
                      
                      for attempt, wait_time in enumerate(wait_times, 1):
                          if attempt > 1:
                              print(f"Waiting {wait_time} seconds before next check...")
                              time.sleep(wait_time)
                          
                          print(f"Checking scan status (attempt {attempt}/{len(wait_times)})...")
                          
                          try:
                              status_response = requests.get(
                                  f"{API_BASE_URL}/analyses/{scan_id}",
                                  headers=headers,
                                  timeout=30
                              )
                              
                              if status_response.status_code != 200:
                                  print(f"Warning: Status check failed with code {status_response.status_code}")
                                  continue
                              
                              analysis_result = status_response.json()
                              status = analysis_result.get('data', {}).get('attributes', {}).get('status')
                              
                              if status == 'completed':
                                  print("Scan completed!")
                                  # Get the final scan results using the file hash
                                  final_response = requests.get(
                                      f"{API_BASE_URL}/files/{file_hash}",
                                      headers=headers,
                                      timeout=30
                                  )
                                  
                                  if final_response.status_code == 200:
                                      scan_data = final_response.json()
                                      break
                                  else:
                                      print("Error retrieving final scan results")
                                      return False
                              else:
                                  print(f"Scan status: {status}")
                          except Exception as e:
                              print(f"Error checking scan status: {e}")
                      else:
                          print("Scan did not complete within timeout period")
                          return False
                  else:
                      print(f"Error checking file status: {lookup_response.status_code}")
                      return False
                  
                  # Process scan results
                  attributes = scan_data.get('data', {}).get('attributes', {})
                  stats = attributes.get('last_analysis_stats', {})
                  results = attributes.get('last_analysis_results', {})
                  
                  # Calculate threat metrics
                  malicious_count = stats.get('malicious', 0)
                  suspicious_count = stats.get('suspicious', 0)
                  total_engines = sum(stats.values())
                  
                  # Determine verdict
                  if malicious_count > 0:
                      verdict = "Malicious"
                      threat_score = min(90, (malicious_count / max(total_engines, 1)) * 100)
                  elif suspicious_count > 0:
                      verdict = "Suspicious"
                      threat_score = min(60, (suspicious_count / max(total_engines, 1)) * 100)
                  else:
                      verdict = "Clean"
                      threat_score = 0
                  
                  # Get detection details
                  detections = []
                  for engine_name, engine_result in results.items():
                      if engine_result.get('category') in ['malicious', 'suspicious']:
                          engine_verdict = engine_result.get('result', 'Unknown')
                          detections.append(f"{engine_name}: {engine_verdict}")
                  
                  # Get report URL
                  report_url = f"https://www.virustotal.com/gui/file/{file_hash}"
                  
                  # Output results
                  print(f"Scan Results:")
                  print(f"- Verdict: {verdict}")
                  print(f"- Threat Score: {threat_score}/100")
                  print(f"- Malicious detections: {malicious_count}/{total_engines}")
                  print(f"- Suspicious detections: {suspicious_count}/{total_engines}")
                  
                  if detections:
                      print(f"- Detections: {', '.join(detections[:5])}")  # Limit to first 5
                      if len(detections) > 5:
                          print(f"  ... and {len(detections) - 5} more")
                  
                  # Create annotation
                  create_annotation(file_path, verdict, threat_score, malicious_count, suspicious_count, total_engines, report_url)
                  
                  # Create commit comment with scan results
                  create_commit_comment(file_path, verdict, report_url, file_hash)
                  
                  return {
                      "file": os.path.basename(file_path),
                      "verdict": verdict,
                      "threat_score": threat_score,
                      "malicious_count": malicious_count,
                      "suspicious_count": suspicious_count,
                      "total_engines": total_engines,
                      "report_url": report_url,
                      "sha256": file_hash,
                      "detections": detections
                  }
                  
              except Exception as e:
                  print(f"Error scanning file: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  return False
          
          def create_commit_comment(file_path, verdict, report_url, sha256):
              """Create GitHub commit comment with scan results"""
              try:
                  github_token = os.environ.get('GITHUB_TOKEN')
                  if not github_token:
                      print("Warning: GITHUB_TOKEN not available, skipping commit comment")
                      return False
                  
                  # Get repository info from environment
                  repo_full_name = os.environ.get('GITHUB_REPOSITORY')  # owner/repo
                  commit_sha = os.environ.get('GITHUB_SHA')
                  
                  if not repo_full_name or not commit_sha:
                      print("Warning: Repository info not available, skipping commit comment")
                      return False
                  
                  # Determine emoji based on verdict
                  if verdict.lower() == "malicious":
                      emoji = "🔴"
                  elif verdict.lower() == "suspicious":
                      emoji = "🟠"
                  else:
                      emoji = "✅"
                  
                  # Format comment body
                  comment_body = f"""## {emoji} VirusTotal Scan Results
          
          **File:** `{os.path.basename(file_path)}`
          **Verdict:** {verdict}
          **SHA256:** `{sha256}`
          
          🔗 **[View Full VirusTotal Report]({report_url})**
          
          ---
          *Automated security scan via GitHub Actions*"""
                  
                  # GitHub API headers
                  headers = {
                      "Authorization": f"token {github_token}",
                      "Accept": "application/vnd.github.v3+json",
                      "User-Agent": "GitHub Actions VirusTotal Scanner"
                  }
                  
                  # Create commit comment
                  api_url = f"https://api.github.com/repos/{repo_full_name}/commits/{commit_sha}/comments"
                  
                  payload = {
                      "body": comment_body,
                      "path": file_path,
                      "line": 1
                  }
                  
                  response = requests.post(
                      api_url,
                      headers=headers,
                      json=payload,
                      timeout=30
                  )
                  
                  if response.status_code == 201:
                      print(f"✅ Commit comment created successfully for {file_path}")
                      return True
                  else:
                      print(f"Warning: Failed to create commit comment. Status: {response.status_code}")
                      print(f"Response: {response.text}")
                      return False
                      
              except Exception as e:
                  print(f"Error creating commit comment: {str(e)}")
                  return False
              """Create GitHub annotation with scan results"""
              # Determine annotation level and icon
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "🔴"
              elif verdict.lower() == "suspicious":
                  level = "warning"
                  icon = "🟠"
              else:
                  level = "notice"
                  icon = "✅"
              
              # Format annotation text
              detection_summary = f"{malicious_count + suspicious_count}/{total_engines} engines"
              message = f"VirusTotal Scan: {verdict} {icon} ({detection_summary})"
              
              # Create GitHub annotations
              print(f"::{level} file={file_path}::{message}")
              print(f"::{level} file={file_path}::Report: {report_url}")
              
              return True
          
          def create_commit_comment(file_path, verdict, report_url, sha256):
              """Create GitHub commit comment with scan results"""
              try:
                  github_token = os.environ.get('GITHUB_TOKEN')
                  if not github_token:
                      print("Warning: GITHUB_TOKEN not available, skipping commit comment")
                      return False
                  
                  # Get repository info from environment
                  repo_full_name = os.environ.get('GITHUB_REPOSITORY')  # owner/repo
                  commit_sha = os.environ.get('GITHUB_SHA')
                  
                  if not repo_full_name or not commit_sha:
                      print("Warning: Repository info not available, skipping commit comment")
                      return False
                  
                  # Determine emoji based on verdict
                  if verdict.lower() == "malicious":
                      emoji = "🔴"
                  elif verdict.lower() == "suspicious":
                      emoji = "🟠"
                  else:
                      emoji = "✅"
                  
                  # Format comment body
                  comment_body = f"""## {emoji} VirusTotal Scan Results
          
          **File:** `{os.path.basename(file_path)}`
          **Verdict:** {verdict}
          **SHA256:** `{sha256}`
          
          🔗 **[View Full VirusTotal Report]({report_url})**
          
          ---
          *Automated security scan via GitHub Actions*"""
                  
                  # GitHub API headers
                  headers = {
                      "Authorization": f"token {github_token}",
                      "Accept": "application/vnd.github.v3+json",
                      "User-Agent": "GitHub Actions VirusTotal Scanner"
                  }
                  
                  # Create commit comment
                  api_url = f"https://api.github.com/repos/{repo_full_name}/commits/{commit_sha}/comments"
                  
                  payload = {
                      "body": comment_body,
                      "path": file_path,
                      "line": 1
                  }
                  
                  response = requests.post(
                      api_url,
                      headers=headers,
                      json=payload,
                      timeout=30
                  )
                  
                  if response.status_code == 201:
                      print(f"✅ Commit comment created successfully for {file_path}")
                      return True
                  else:
                      print(f"Warning: Failed to create commit comment. Status: {response.status_code}")
                      print(f"Response: {response.text}")
                      return False
                      
              except Exception as e:
                  print(f"Error creating commit comment: {str(e)}")
                  return False
          
          def main():
              # Get API key
              api_key = os.environ.get('VIRUS_TOTAL_API_KEY')
              if not api_key:
                  print("Error: VIRUS_TOTAL_API_KEY environment variable not set")
                  return 1
              
              # Get changed files from environment
              changed_files = os.environ.get('CHANGED_FILES', '').strip().split('\n')
              changed_files = [f for f in changed_files if f.strip()]
              
              if not changed_files:
                  print("No changed files to scan")
                  return 0
              
              print(f"Processing {len(changed_files)} changed files")
              
              # Initialize summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write("## 🛡️ VirusTotal Security Scan Results\n\n")
              
              # Process each file
              results = []
              success_count = 0
              
              for file_path in changed_files:
                  print(f"\n--- Scanning: {file_path} ---")
                  
                  result = scan_file(file_path, api_key)
                  if result:
                      results.append(result)
                      success_count += 1
                  
                  print(f"--- Completed: {file_path} ---\n")
              
              # Write detailed results to summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  if results:
                      f.write("| File | Verdict | Detections | Engines | Report |\n")
                      f.write("|------|---------|------------|---------|--------|\n")
                      
                      for result in results:
                          # Set icon based on verdict
                          icon = ""
                          verdict = result["verdict"]
                          
                          if "malicious" in verdict.lower():
                              icon = "🔴 "
                          elif "suspicious" in verdict.lower():
                              icon = "🟠 "
                          else:
                              icon = "✅ "
                          
                          # Format detection summary
                          detection_count = result["malicious_count"] + result["suspicious_count"]
                          detection_summary = f"{detection_count}/{result['total_engines']}"
                          
                          # Format top detections
                          detections = result.get("detections", [])
                          if detections:
                              top_detections = ", ".join([d.split(":")[0] for d in detections[:3]])
                              if len(detections) > 3:
                                  top_detections += f" (+{len(detections) - 3} more)"
                          else:
                              top_detections = "None"
                          
                          f.write(f"| {result['file']} | {icon}{verdict} | {top_detections} | {detection_summary} | [View Report]({result['report_url']}) |\n")
                  else:
                      f.write("No files were successfully scanned.\n")
                  
                  f.write(f"\n\n### Summary\n")
                  f.write(f"- Successfully processed {success_count} out of {len(changed_files)} files\n")
                  
                  # Add statistics
                  if results:
                      clean_files = sum(1 for r in results if r["verdict"] == "Clean")
                      suspicious_files = sum(1 for r in results if r["verdict"] == "Suspicious")
                      malicious_files = sum(1 for r in results if r["verdict"] == "Malicious")
                      
                      f.write(f"- Clean files: {clean_files}\n")
                      f.write(f"- Suspicious files: {suspicious_files}\n")
                      f.write(f"- Malicious files: {malicious_files}\n")
                  
                  # Add additional info about VirusTotal
                  f.write("\n### About the Scan\n")
                  f.write("- Files are scanned using the VirusTotal API v3\n")
                  f.write("- Results are based on analysis from 70+ antivirus engines\n")
                  f.write("- Files already in the VirusTotal database use existing scan results\n")
                  f.write("- Visit the report links for complete analysis details\n")
                  
                  # Add rate limit info
                  f.write("\n### API Usage\n")
                  f.write("- This scan uses the VirusTotal public API\n")
                  f.write("- Rate limits: 4 requests per minute for free accounts\n")
                  f.write("- File size limit: 32MB for free accounts, 650MB for premium\n")
              
              # Return success if at least one file was processed
              return 0 if success_count > 0 else 1
          
          if __name__ == "__main__":
              sys.exit(main())
          EOF
          
          # Make script executable and run
          chmod +x scan.py
          python scan.py || echo "Scan completed with some issues, but continuing workflow"

      - name: No files to scan message
        if: env.CHANGED_FILES == ''
        run: |
          echo "No security report files were added or modified in this push."
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No security report files were changed in this push." >> $GITHUB_STEP_SUMMARY