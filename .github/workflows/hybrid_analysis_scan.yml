name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Reports
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Just enough to see the changes
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Find changed files
        id: find-files
        run: |
          # Get only renamed, added, or modified files in the push
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Count for logging
          COUNT=$(git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" | wc -l || echo 0)
          
          echo "Found $COUNT changed security report files"
          
          # Show the files found
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" || echo "No files found"

      - name: Scan changed files with Hybrid Analysis
        if: env.CHANGED_FILES != ''
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        run: |
          cat > scan.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import requests
          import json
          
          # Constants
          API_BASE_URL = "https://www.hybrid-analysis.com/api/v2"
          
          def scan_file(file_path, api_key):
              """Scan a file with Hybrid Analysis and create annotation with results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  print(f"Error: File not found: {file_path}")
                  return False
              
              try:
                  # Setup API headers
                  headers = {
                      "api-key": api_key,
                      "User-Agent": "Falcon Sandbox GitHub Action",
                      "Accept": "application/json"
                  }
                  
                  # Get file size (in MB) for logging and strategy
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  print(f"File: {os.path.basename(file_path)} ({file_size_mb:.2f} MB)")
                  
                  # First, check API key info and quota
                  try:
                      key_response = requests.get(
                          f"{API_BASE_URL}/key/current",
                          headers=headers,
                          timeout=10
                      )
                      key_info = key_response.json()
                      print(f"API Key Info: {key_info.get('auth_level_name')} level")
                      print(f"API Headers: {key_response.headers.get('Api-Limits', '')}")
                      print(f"Submission Limits: {key_response.headers.get('Submission-Limits', '')}")
                  except Exception as e:
                      print(f"Warning: Could not check API key info: {e}")
                  
                  # If file size > 50MB, we'll submit for detailed analysis, otherwise use quick-scan
                  if file_size_mb > 50:
                      # For larger files, use full submission to Windows 11 environment
                      print(f"Using full submission for large file ({file_size_mb:.2f} MB)")
                      
                      # Prepare submission parameters
                      with open(file_path, 'rb') as f:
                          files = {'file': (os.path.basename(file_path), f)}
                          data = {
                              "environment_id": 140,  # Windows 11 64-bit
                              "comment": "GitHub Security Scan",
                              "submit_name": os.path.basename(file_path)
                          }
                          
                          # Submit for analysis
                          print("Submitting file for full analysis...")
                          response = requests.post(
                              f"{API_BASE_URL}/submit/file",
                              headers=headers,
                              files=files,
                              data=data,
                              timeout=300  # 5-minute timeout for large files
                          )
                      
                      if response.status_code not in [200, 201]:
                          print(f"Error: Submission failed with status {response.status_code}")
                          print(f"Response: {response.text}")
                          return False
                      
                      # Parse response
                      submission = response.json()
                      print(f"Submission successful: {json.dumps(submission, indent=2)}")
                      
                      # Get job_id and sha256
                      job_id = submission.get('job_id')
                      submission_id = submission.get('submission_id')
                      sha256 = submission.get('sha256')
                      
                      if not sha256:
                          print("Error: No SHA256 in response")
                          return False
                      
                      # Full submissions take longer to process, so we'll just create a pending annotation
                      report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                      create_annotation(file_path, "Pending Analysis", 0, report_url)
                      
                      print(f"Full analysis submitted. Check results later at: {report_url}")
                      print(f"Job ID: {job_id}, Submission ID: {submission_id}")
                      
                      return {
                          "file": os.path.basename(file_path),
                          "verdict": "Pending Analysis",
                          "threat_score": 0,
                          "report_url": report_url,
                          "sha256": sha256
                      }
                  else:
                      # Use quick-scan for smaller files
                      print(f"Using quick-scan for file ({file_size_mb:.2f} MB)")
                      
                      # Check available scanners
                      scanner_response = requests.get(
                          f"{API_BASE_URL}/quick-scan/state",
                          headers=headers,
                          timeout=10
                      )
                      
                      scanners = scanner_response.json()
                      print(f"Available scanners: {', '.join([s['name'] for s in scanners if s['available']])}")
                      
                      # Submit file for quick scan
                      with open(file_path, 'rb') as f:
                          files = {'file': (os.path.basename(file_path), f)}
                          data = {
                              "scan_type": "all",  # Use all available scanners
                              "comment": "GitHub Security Scan",
                              "submit_name": os.path.basename(file_path)
                          }
                          
                          print("Submitting file for quick scan...")
                          response = requests.post(
                              f"{API_BASE_URL}/quick-scan/file",
                              headers=headers,
                              files=files,
                              data=data,
                              timeout=300  # 5-minute timeout
                          )
                      
                      if response.status_code not in [200, 201]:
                          print(f"Error: Quick scan failed with status {response.status_code}")
                          print(f"Response: {response.text}")
                          return False
                      
                      # Parse response
                      scan_result = response.json()
                      scan_id = scan_result.get('id')
                      sha256 = scan_result.get('sha256')
                      
                      if not scan_id or not sha256:
                          print("Error: No scan ID or SHA256 in response")
                          return False
                      
                      # Check if scan is finished
                      if not scan_result.get('finished', False):
                          print(f"Quick scan in progress. Waiting for results (ID: {scan_id})...")
                          
                          # Wait and poll for results - max 2 minutes
                          max_attempts = 4
                          wait_times = [5, 15, 30, 60]  # Total: 110 seconds
                          
                          for attempt, wait_time in enumerate(wait_times, 1):
                              if attempt > 1:
                                  print(f"Waiting {wait_time} seconds before checking again...")
                                  time.sleep(wait_time)
                              
                              print(f"Checking status (attempt {attempt}/{max_attempts})...")
                              
                              try:
                                  status_response = requests.get(
                                      f"{API_BASE_URL}/quick-scan/{scan_id}",
                                      headers=headers,
                                      timeout=10
                                  )
                                  
                                  if status_response.status_code != 201:
                                      print(f"Warning: Status check failed with code {status_response.status_code}")
                                      continue
                                  
                                  scan_result = status_response.json()
                                  if scan_result.get('finished', False):
                                      print("Quick scan finished!")
                                      break
                                  
                                  print("Scan still in progress...")
                              except Exception as e:
                                  print(f"Error checking status: {e}")
                      
                      # Process the results
                      report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                      
                      # Process scanners_v2 results if available
                      scanners_v2 = scan_result.get('scanners_v2', {})
                      verdict = "No threats detected"
                      threat_score = 0
                      
                      # Check for malicious results in any scanner
                      malicious_results = []
                      
                      for scanner_name, scanner_result in scanners_v2.items():
                          status = scanner_result.get('status')
                          if status in ['malicious', 'suspicious']:
                              malicious_results.append(f"{scanner_name}: {status}")
                      
                      if malicious_results:
                          verdict = "Suspicious" if "suspicious" in str(malicious_results) else "Malicious"
                          threat_score = 50 if verdict == "Suspicious" else 80
                          print(f"Detected threats: {', '.join(malicious_results)}")
                      
                      # Create annotation
                      create_annotation(file_path, verdict, threat_score, report_url)
                      
                      print(f"Quick scan complete. Result: {verdict} (Score: {threat_score})")
                      print(f"Report URL: {report_url}")
                      
                      return {
                          "file": os.path.basename(file_path),
                          "verdict": verdict,
                          "threat_score": threat_score,
                          "report_url": report_url,
                          "sha256": sha256
                      }
              
              except Exception as e:
                  print(f"Error scanning file: {str(e)}")
                  return False
          
          def create_annotation(file_path, verdict, threat_score, report_url):
              """Create GitHub annotation with scan results"""
              # Determine annotation level and icon
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "🔴"
              elif verdict.lower() in ["suspicious", "pending analysis"]:
                  level = "warning"
                  icon = "🟠"
              else:
                  level = "notice"
                  icon = "✅"
              
              # Format annotation text
              message = f"Security Scan: {verdict} {icon} (Score: {threat_score}/100)"
              
              # Create GitHub annotations
              print(f"::{level} file={file_path}::{message}")
              print(f"::{level} file={file_path}::Report: {report_url}")
              
              return True
          
          def main():
              # Get API key
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  print("Error: HYBRID_ANALYSIS_API_KEY environment variable not set")
                  return 1
              
              # Get changed files from environment
              changed_files = os.environ.get('CHANGED_FILES', '').strip().split('\n')
              changed_files = [f for f in changed_files if f.strip()]
              
              if not changed_files:
                  print("No changed files to scan")
                  return 0
              
              print(f"Processing {len(changed_files)} changed files")
              
              # Initialize summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write("## 🔍 Hybrid Analysis Security Scan Results\n\n")
              
              # Process each file
              results = []
              success_count = 0
              
              for file_path in changed_files:
                  print(f"\n--- Scanning: {file_path} ---")
                  
                  result = scan_file(file_path, api_key)
                  if result:
                      results.append(result)
                      success_count += 1
                  
                  print(f"--- Completed: {file_path} ---\n")
              
              # Write detailed results to summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  if results:
                      f.write("| File | Verdict | Threat Score | Report |\n")
                      f.write("|------|---------|--------------|--------|\n")
                      
                      for result in results:
                          icon = ""
                          verdict = result["verdict"]
                          
                          if "malicious" in verdict.lower():
                              icon = "🔴 "
                          elif "suspicious" in verdict.lower() or "pending" in verdict.lower():
                              icon = "🟠 "
                          else:
                              icon = "✅ "
                          
                          f.write(f"| {result['file']} | {icon}{verdict} | {result['threat_score']} | [View Report]({result['report_url']}) |\n")
                  else:
                      f.write("No files were successfully scanned.\n")
                  
                  f.write(f"\n\n### Summary\n")
                  f.write(f"- Successfully processed {success_count} out of {len(changed_files)} files\n")
                  
                  # Add additional info about Hybrid Analysis
                  f.write("\n### About the Scan\n")
                  f.write("- Files larger than 50MB are submitted for full analysis which may take longer to process\n")
                  f.write("- Smaller files are scanned using quick scan with multiple security engines\n")
                  f.write("- Visit the report links for complete details and to download the files if needed\n")
              
              # Return success if at least one file was processed
              return 0 if success_count > 0 else 1
          
          if __name__ == "__main__":
              sys.exit(main())
          EOF
          
          # Make script executable and run
          chmod +x scan.py
          python scan.py || echo "Scan completed with some issues, but continuing workflow"

      - name: No files to scan message
        if: env.CHANGED_FILES == ''
        run: |
          echo "No security report files were added or modified in this push."
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No security report files were changed in this push." >> $GITHUB_STEP_SUMMARY