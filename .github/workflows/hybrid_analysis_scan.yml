name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Documents
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need to see what changed
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Find changed security documents
        id: find-changes
        run: |
          # Find renamed (R), added (A), or modified (M) PDF, DOCX, or PPTX files
          echo "FILES_TO_SCAN<<EOF" >> $GITHUB_ENV
          git diff --name-status ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "^[RAM].*Annual Security Reports/.*(\.pdf|\.docx|\.pptx)$" | 
            awk '{print $NF}' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Run security scan
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        run: |
          cat > simple_scan.py << 'EOL'
          #!/usr/bin/env python3
          import os
          import sys
          import time
          import requests
          import logging

          # Simple logging
          logging.basicConfig(level=logging.INFO, format='%(message)s')

          def scan_file(file_path, api_key):
              """Submit a file to Hybrid Analysis and wait for results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  logging.error(f"File not found: {file_path}")
                  return False
              
              # First, check API connection
              headers = {
                  "api-key": api_key,
                  "User-Agent": "Hybrid Analysis GitHub Action",
                  "Accept": "application/json"
              }
              
              try:
                  # Submit the file
                  logging.info(f"Submitting {file_path} to Hybrid Analysis...")
                  
                  with open(file_path, 'rb') as f:
                      response = requests.post(
                          "https://www.hybrid-analysis.com/api/v2/submit/file",
                          headers=headers,
                          files={'file': (os.path.basename(file_path), f)},
                          data={"environment_id": "400", "comment": "GitHub Security Scan"}
                      )
                  
                  if response.status_code != 200:
                      logging.error(f"Submission failed: {response.status_code} - {response.text}")
                      return False
                  
                  result = response.json()
                  job_id = result.get('job_id')
                  sha256 = result.get('sha256')
                  
                  if not job_id and not sha256:
                      logging.error("No job ID or SHA256 in response")
                      return False
                  
                  # If only SHA256 (meaning the file was already analyzed)
                  if sha256 and not job_id:
                      report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                      create_annotation(file_path, "Pending", 0, report_url)
                      logging.info(f"File already analyzed: {report_url}")
                      return True
                  
                  # Wait for analysis to complete - use adaptive timing based on file size
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  max_attempts = 6
                  
                  # Larger files need more time
                  if file_size_mb > 10:
                      wait_times = [5, 45, 90, 90, 90, 90]  # Total ~7 minutes
                  else:
                      wait_times = [5, 30, 30, 60, 60, 60]  # Total ~4 minutes
                  
                  logging.info(f"Waiting for analysis (file size: {file_size_mb:.1f} MB)...")
                  
                  for attempt, wait_time in enumerate(wait_times, 1):
                      if attempt > 1:
                          time.sleep(wait_time)
                      
                      logging.info(f"Checking status (attempt {attempt}/{max_attempts})...")
                      
                      try:
                          status_response = requests.get(
                              f"https://www.hybrid-analysis.com/api/v2/report/{job_id}/summary",
                              headers=headers
                          )
                          
                          if status_response.status_code != 200:
                              continue
                          
                          report = status_response.json()
                          state = report.get('state', '')
                          
                          if state == 'SUCCESS':
                              # Get the results
                              verdict = report.get('verdict', 'Unknown')
                              threat_score = report.get('threat_score', 0)
                              if threat_score is None:
                                  threat_score = 0
                                  
                              # Get the report URL from the SHA256
                              report_sha256 = report.get('sha256', sha256)
                              report_url = f"https://www.hybrid-analysis.com/sample/{report_sha256}"
                              
                              # Create annotation
                              create_annotation(file_path, verdict, threat_score, report_url)
                              logging.info(f"Analysis complete: {verdict} (Score: {threat_score})")
                              return True
                          
                          elif state == 'ERROR':
                              error_msg = report.get('error', 'Unknown error')
                              logging.error(f"Analysis failed: {error_msg}")
                              return False
                          
                          logging.info(f"Status: {state}")
                          
                      except Exception as e:
                          logging.error(f"Error checking status: {e}")
                  
                  # If we get here, the analysis is still pending
                  report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                  create_annotation(file_path, "Pending", 0, report_url)
                  logging.info(f"Analysis still pending, check later: {report_url}")
                  return True
                  
              except Exception as e:
                  logging.error(f"Error: {e}")
                  return False
                  
          def create_annotation(file_path, verdict, threat_score, report_url):
              """Create GitHub annotation for a file"""
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "⚠️"
              elif verdict.lower() == "suspicious":
                  level = "warning" 
                  icon = "⚠️"
              else:
                  level = "notice"
                  icon = "ℹ️"
                  
              print(f"::{level} file={file_path}::Security Scan: {verdict} {icon} (Score: {threat_score})")
              print(f"::{level} file={file_path}::Hybrid Analysis: {report_url}")

          def main():
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  logging.error("HYBRID_ANALYSIS_API_KEY environment variable not set")
                  return 1
                  
              # Get files from FILES_TO_SCAN environment variable
              files_env = os.environ.get('FILES_TO_SCAN', '')
              files = [f for f in files_env.split('\n') if f.strip()]
              
              if not files:
                  logging.info("No files to scan")
                  return 0
              
              logging.info(f"Scanning {len(files)} files...")
              
              # Process each file
              results = []
              for file_path in files:
                  results.append(scan_file(file_path, api_key))
                  
              # Return success if all files were processed successfully
              return 0 if all(results) else 1

          if __name__ == "__main__":
              sys.exit(main())
          EOL
          
          # Run the script
          python simple_scan.py