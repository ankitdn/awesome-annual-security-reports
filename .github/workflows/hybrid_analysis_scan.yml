name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Reports
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Find changed files
        id: find-files
        run: |
          # Get only renamed, added, or modified files in the push
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Count for logging
          COUNT=$(git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" | wc -l)
          
          echo "Found $COUNT changed security report files"
          
          # Show the files found
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$"

      - name: Scan changed files with Hybrid Analysis
        if: env.CHANGED_FILES != ''
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        run: |
          cat > scan.py << 'EOL'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import requests
          import json
          
          def scan_file(file_path, api_key):
              """Scan a file with Hybrid Analysis and create annotation with results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  print(f"Error: File not found: {file_path}")
                  return False
              
              try:
                  # Setup API headers
                  headers = {
                      "api-key": api_key,
                      "User-Agent": "Hybrid Analysis GitHub Action",
                      "Accept": "application/json"
                  }
                  
                  # Submit file for analysis
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  print(f"Submitting file: {file_path} ({file_size_mb:.2f} MB)")
                  
                  with open(file_path, 'rb') as f:
                      response = requests.post(
                          "https://www.hybrid-analysis.com/api/v2/submit/file",
                          headers=headers,
                          files={'file': (os.path.basename(file_path), f)},
                          data={"environment_id": "400"}
                      )
                  
                  # Status codes 200 and 201 are both success responses
                  if response.status_code not in [200, 201]:
                      print(f"Error: Submission failed with status {response.status_code}")
                      print(f"Response: {response.text}")
                      return False
                  
                  # Parse response
                  try:
                      result = response.json()
                      print(f"API Response: {json.dumps(result, indent=2)}")
                  except Exception as e:
                      print(f"Error parsing response: {e}")
                      print(f"Raw response: {response.text}")
                      return False
                  
                  # Get submission details
                  job_id = result.get('job_id')
                  sha256 = result.get('sha256')
                  
                  if not job_id and not sha256:
                      print("Error: No job ID or SHA256 in response")
                      return False
                  
                  print(f"File submitted successfully. SHA256: {sha256}")
                  
                  # If no job_id, the file was already analyzed
                  if sha256 and not job_id:
                      report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                      create_annotation(file_path, "Previously analyzed", 0, report_url)
                      return True
                  
                  # Poll for analysis results
                  print(f"Waiting for analysis results (job_id: {job_id})...")
                  
                  # Determine appropriate wait times based on file size
                  if file_size_mb > 20:  # Large file
                      attempts = 5
                      wait_times = [10, 60, 90, 90, 90]  # ~5.5 minutes
                  elif file_size_mb > 5:  # Medium file
                      attempts = 4
                      wait_times = [5, 45, 60, 60]  # ~2.8 minutes
                  else:  # Small file
                      attempts = 3
                      wait_times = [5, 30, 30]  # ~1 minute
                  
                  print(f"File size: {file_size_mb:.1f} MB - Using {attempts} polling attempts")
                  
                  for attempt, wait_time in enumerate(wait_times, 1):
                      if attempt > 1:
                          print(f"Waiting {wait_time} seconds before next check...")
                          time.sleep(wait_time)
                      
                      print(f"Checking status (attempt {attempt}/{attempts})...")
                      
                      try:
                          status_response = requests.get(
                              f"https://www.hybrid-analysis.com/api/v2/report/{job_id}/summary",
                              headers=headers
                          )
                          
                          # Debug information about the response
                          print(f"Status check response code: {status_response.status_code}")
                          
                          if status_response.status_code != 200:
                              print(f"Warning: Status check failed with code {status_response.status_code}")
                              print(f"Response: {status_response.text}")
                              continue
                          
                          report = status_response.json()
                          print(f"Status response: {json.dumps(report, indent=2)}")
                          
                          status = report.get('state', '')
                          
                          if status == 'SUCCESS':
                              # Get results
                              verdict = report.get('verdict', 'Unknown')
                              threat_score = report.get('threat_score')
                              if threat_score is None:
                                  threat_score = 0
                              
                              # Get report URL
                              report_sha256 = report.get('sha256', sha256)
                              report_url = f"https://www.hybrid-analysis.com/sample/{report_sha256}"
                              
                              print(f"Analysis complete: {verdict} (Score: {threat_score})")
                              create_annotation(file_path, verdict, threat_score, report_url)
                              return True
                          
                          elif status == 'ERROR':
                              error = report.get('error', 'Unknown error')
                              print(f"Error: Analysis failed - {error}")
                              return False
                          
                          print(f"Current status: {status}")
                      except Exception as e:
                          print(f"Error checking status: {e}")
                  
                  # If we get here, analysis is still pending after all attempts
                  report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                  print(f"Analysis still in progress, check manually: {report_url}")
                  create_annotation(file_path, "Processing", 0, report_url)
                  return True
                  
              except Exception as e:
                  print(f"Error scanning file: {str(e)}")
                  return False
          
          def create_annotation(file_path, verdict, threat_score, report_url):
              """Create GitHub annotation with scan results"""
              # Determine annotation level and icon
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "üî¥"
              elif verdict.lower() == "suspicious":
                  level = "warning"
                  icon = "üü†"
              else:
                  level = "notice"
                  icon = "‚ÑπÔ∏è"
              
              # Format annotation text
              message = f"Security Scan: {verdict} {icon} (Score: {threat_score}/100)"
              
              # Create GitHub annotations
              print(f"::{level} file={file_path}::{message}")
              print(f"::{level} file={file_path}::Report: {report_url}")
              
              # Also add to summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  f.write(f"- **{os.path.basename(file_path)}**: {verdict} {icon} - [View Report]({report_url})\n")
              
              return True
          
          def main():
              # Get API key
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  print("Error: HYBRID_ANALYSIS_API_KEY environment variable not set")
                  return 1
              
              # Get changed files from environment
              changed_files = os.environ.get('CHANGED_FILES', '').strip().split('\n')
              changed_files = [f for f in changed_files if f.strip()]
              
              if not changed_files:
                  print("No changed files to scan")
                  return 0
              
              print(f"Processing {len(changed_files)} changed files")
              
              # Initialize summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write("## Hybrid Analysis Security Scan Results\n\n")
              
              # Process each file
              success_count = 0
              for file_path in changed_files:
                  print(f"\n--- Scanning: {file_path} ---")
                  if scan_file(file_path, api_key):
                      success_count += 1
                  print(f"--- Completed: {file_path} ---\n")
              
              # Return success if at least one file was processed successfully
              print(f"Successfully processed {success_count} out of {len(changed_files)} files")
              return 0 if success_count > 0 else 1
          
          if __name__ == "__main__":
              sys.exit(m