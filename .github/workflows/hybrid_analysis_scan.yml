name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

permissions:
  contents: write # For potential git note operations

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Documents
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history to get accurate file info
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Find changed security documents
        id: find-changes
        run: |
          # Check if the file was renamed (R) or added (A) or modified (M)
          changed_files=$(git diff --name-status ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "^[RAM].*Annual Security Reports/.*(\.pdf|\.docx|\.pptx)$" | 
            awk '{print $2}')
            
          if [ -z "$changed_files" ]; then
            echo "No new or modified security documents found."
            echo "files_to_scan=" >> $GITHUB_OUTPUT
            echo "should_scan=false" >> $GITHUB_ENV
          else
            echo "Found changed security documents for scanning:"
            echo "$changed_files"
            
            # Format for GITHUB_OUTPUT
            echo "files_to_scan<<EOF" >> $GITHUB_OUTPUT
            echo "$changed_files" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            
            echo "should_scan=true" >> $GITHUB_ENV
          fi

      - name: Run Hybrid Analysis scan
        if: env.should_scan == 'true'
        id: scan
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        run: |
          cat > hybrid_scan.py << 'EOL'
          #!/usr/bin/env python3
          """
          Optimized Hybrid Analysis Scanner
          """
          import os
          import sys
          import time
          import json
          import requests
          import logging
          from datetime import datetime
          
          # Set up logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )
          
          class HybridAnalysisScanner:
              def __init__(self, api_key):
                  self.api_key = api_key
                  self.headers = {
                      "api-key": api_key,
                      "User-Agent": "Hybrid Analysis GitHub Action",
                      "Accept": "application/json"
                  }
                  self.results = {}
                  
              def test_connection(self):
                  """Test API connectivity"""
                  try:
                      response = requests.get(
                          "https://www.hybrid-analysis.com/api/v2/key/current", 
                          headers=self.headers,
                          timeout=30
                      )
                      response.raise_for_status()
                      return True
                  except Exception as e:
                      logging.error(f"API connection failed: {e}")
                      return False
              
              def submit_file(self, file_path):
                  """Submit a file for analysis"""
                  if not os.path.exists(file_path):
                      logging.error(f"File not found: {file_path}")
                      return None
                      
                  try:
                      # Get file size for logging
                      file_size = os.path.getsize(file_path) / (1024 * 1024)  # Size in MB
                      logging.info(f"Submitting file: {file_path} ({file_size:.2f} MB)")
                      
                      url = "https://www.hybrid-analysis.com/api/v2/submit/file"
                      
                      with open(file_path, 'rb') as f:
                          files = {'file': (os.path.basename(file_path), f)}
                          data = {
                              "environment_id": "400",  # Windows 11 64-bit
                              "comment": "GitHub Security Scan"
                          }
                          
                          response = requests.post(
                              url, 
                              headers=self.headers, 
                              files=files, 
                              data=data,
                              timeout=300  # 5-minute timeout for uploads
                          )
                          
                          if response.status_code != 200:
                              logging.error(f"API error: {response.status_code} - {response.text}")
                              return None
                          
                          result = response.json()
                          logging.info(f"Submission successful: {json.dumps(result)}")
                          return result
                  except Exception as e:
                      logging.error(f"Error submitting file: {str(e)}")
                      return None
              
              def check_analysis_status(self, job_id):
                  """Check analysis status"""
                  url = f"https://www.hybrid-analysis.com/api/v2/report/{job_id}/summary"
                  
                  try:
                      response = requests.get(
                          url, 
                          headers=self.headers,
                          timeout=30
                      )
                      if response.status_code == 200:
                          return response.json()
                      logging.warning(f"Status check returned code {response.status_code}")
                      return None
                  except Exception as e:
                      logging.error(f"Error checking status: {str(e)}")
                      return None
              
              def scan_file(self, file_path):
                  """Process a single file and return results"""
                  # Submit the file
                  submission = self.submit_file(file_path)
                  if not submission:
                      self.results[file_path] = {
                          "success": False,
                          "error": "Submission failed",
                          "report_url": None,
                          "verdict": "Error",
                          "threat_score": 0
                      }
                      return False
                  
                  # Get job ID or SHA256
                  job_id = submission.get('job_id')
                  sha256 = submission.get('sha256')
                  
                  if not job_id and not sha256:
                      self.results[file_path] = {
                          "success": False,
                          "error": "No job ID or SHA256 returned",
                          "report_url": None,
                          "verdict": "Error",
                          "threat_score": 0
                      }
                      return False
                  
                  # If we only have SHA256, create report URL but can't check status
                  if sha256 and not job_id:
                      report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                      logging.info(f"No job ID, direct report URL: {report_url}")
                      
                      self.results[file_path] = {
                          "success": True,
                          "report_url": report_url,
                          "verdict": "Pending",
                          "threat_score": 0,
                          "sha256": sha256
                      }
                      
                      # Create GitHub annotation
                      self.create_github_annotation(file_path, report_url, "Pending", 0)
                      return True
                  
                  # Poll for analysis results
                  max_attempts = 5
                  for attempt in range(1, max_attempts + 1):
                      logging.info(f"Checking analysis status (attempt {attempt}/{max_attempts})")
                      
                      time.sleep(30 if attempt > 1 else 5)  # Wait less on first attempt
                      
                      report = self.check_analysis_status(job_id)
                      if not report:
                          continue
                      
                      status = report.get('state', '')
                      
                      if status == 'SUCCESS':
                          # Extract result info
                          threat_score = report.get('threat_score')
                          if threat_score is None:
                              threat_score = 0
                          
                          verdict = report.get('verdict', 'Unknown')
                          report_sha256 = report.get('sha256') or sha256
                          report_url = f"https://www.hybrid-analysis.com/sample/{report_sha256}"
                          
                          logging.info(f"Analysis complete - Verdict: {verdict}, Threat Score: {threat_score}")
                          
                          self.results[file_path] = {
                              "success": True,
                              "report_url": report_url,
                              "verdict": verdict,
                              "threat_score": threat_score,
                              "sha256": report_sha256
                          }
                          
                          # Create GitHub annotation
                          self.create_github_annotation(file_path, report_url, verdict, threat_score)
                          return True
                      
                      elif status == 'ERROR':
                          error_msg = report.get('error', 'Unknown error')
                          logging.error(f"Analysis failed: {error_msg}")
                          
                          self.results[file_path] = {
                              "success": False,
                              "error": error_msg,
                              "report_url": None if not sha256 else f"https://www.hybrid-analysis.com/sample/{sha256}",
                              "verdict": "Error",
                              "threat_score": 0
                          }
                          return False
                      
                      logging.info(f"Current status: {status}")
                  
                  # If we get here, analysis is still pending after all attempts
                  report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                  
                  self.results[file_path] = {
                      "success": True,
                      "report_url": report_url,
                      "verdict": "Pending",
                      "threat_score": 0,
                      "sha256": sha256
                  }
                  
                  self.create_github_annotation(file_path, report_url, "Pending", 0)
                  return True
                  
              def create_github_annotation(self, file_path, report_url, verdict, threat_score):
                  """Create GitHub annotation for a file"""
                  # Determine annotation level based on verdict
                  if verdict.lower() == "malicious":
                      level = "error"
                      icon = "⚠️"
                  elif verdict.lower() == "suspicious":
                      level = "warning"
                      icon = "⚠️"
                  else:
                      level = "notice"
                      icon = "ℹ️"
                      
                  message = f"Security Scan: {verdict} {icon} (Score: {threat_score}/100)"
                  
                  print(f"::{level} file={file_path}::{message}")
                  print(f"::{level} file={file_path}::Hybrid Analysis: {report_url}")
                  
              def create_summary(self):
                  """Create a summary of scan results for GitHub job summary"""
                  summary = [
                      "# Hybrid Analysis Security Scan Results\n",
                      "| File | Verdict | Threat Score | Report URL |",
                      "|------|---------|--------------|------------|"
                  ]
                  
                  for file_path, result in self.results.items():
                      file_name = os.path.basename(file_path)
                      verdict = result.get('verdict', 'Error')
                      score = result.get('threat_score', 'N/A')
                      url = result.get('report_url', 'N/A')
                      
                      # Add emoji based on verdict
                      verdict_formatted = verdict
                      if verdict.lower() == "malicious":
                          verdict_formatted = f"🔴 {verdict}"
                      elif verdict.lower() == "suspicious":
                          verdict_formatted = f"🟠 {verdict}"
                      elif verdict.lower() == "no specific threat":
                          verdict_formatted = f"🟢 {verdict}"
                      elif verdict.lower() == "pending":
                          verdict_formatted = f"⏳ {verdict}"
                      
                      url_link = f"[View Report]({url})" if url != 'N/A' else 'N/A'
                      summary.append(f"| {file_name} | {verdict_formatted} | {score} | {url_link} |")
                  
                  return "\n".join(summary)
          
          def main():
              # Get API key
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  logging.error("Missing HYBRID_ANALYSIS_API_KEY environment variable")
                  return 1
              
              # Get file paths from command-line arguments
              files_to_scan = sys.argv[1:]
              if not files_to_scan:
                  logging.error("No files to scan specified")
                  return 0
              
              logging.info(f"Starting security scan for {len(files_to_scan)} files")
              
              # Initialize scanner
              scanner = HybridAnalysisScanner(api_key)
              
              # Test API connection
              if not scanner.test_connection():
                  logging.error("Failed to connect to Hybrid Analysis API")
                  return 1
              
              # Scan each file
              success_count = 0
              for file_path in files_to_scan:
                  if scanner.scan_file(file_path):
                      success_count += 1
              
              # Create summary for GitHub job summary
              summary = scanner.create_summary()
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write(summary)
              
              # Write results to results.json for potential further processing
              with open('scan_results.json', 'w') as f:
                  json.dump(scanner.results, f, indent=2)
              
              # Return success if all files were processed successfully
              return 0 if success_count == len(files_to_scan) else 1
          
          if __name__ == "__main__":
              try:
                  exit_code = main()
                  sys.exit(exit_code)
              except Exception as e:
                  logging.error(f"Unhandled error: {str(e)}")
                  sys.exit(1)
          EOL
          
          # Make script executable
          chmod +x hybrid_scan.py
          
          # Get the list of files to scan from the output of the previous step
          files="${{ steps.find-changes.outputs.files_to_scan }}"
          
          # Run the scanner
          python hybrid_scan.py $files

      - name: Store scan results as artifact
        if: env.should_scan == 'true' && always()
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: scan_results.json
          retention-days: 90

      - name: Record scan results in repository
        if: env.should_scan == 'true' && success()
        run: |
          # Add Hybrid Analysis URLs to a file in the repo that tracks scan history
          mkdir -p .github/security-scans
          
          # Create or update the CSV file tracking scan history
          if [ ! -f ".github/security-scans/history.csv" ]; then
            echo "Date,File,Verdict,Score,SHA256,Report URL" > .github/security-scans/history.csv
          fi
          
          # Parse the JSON results and add to CSV
          python -c '
          import json
          import csv
          from datetime import datetime
          
          # Read scan results
          with open("scan_results.json", "r") as f:
              results = json.load(f)
          
          # Append to CSV
          with open(".github/security-scans/history.csv", "a") as f:
              for file_path, result in results.items():
                  if result.get("success", False):
                      date = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                      file_name = file_path.split("/")[-1]
                      verdict = result.get("verdict", "Unknown")
                      score = result.get("threat_score", "")
                      sha256 = result.get("sha256", "")
                      url = result.get("report_url", "")
                      
                      f.write(f"{date},{file_name},{verdict},{score},{sha256},{url}\n")
          '
          
          # Commit and push the updated CSV if there are changes
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          
          if git diff --quiet .github/security-scans/; then
            echo "No changes to security scan history"
          else
            git add .github/security-scans/history.csv
            git commit -m "Update security scan history [skip ci]"
            git push
          fi