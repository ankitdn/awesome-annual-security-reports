name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

permissions:
  contents: write

jobs:
  scan-security-files:
    runs-on: ubuntu-latest
    name: Scan Security Report Files
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
          token: ${{ secrets.GITHUB_TOKEN }}
          ref: ${{ github.ref }}
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Debug branch and git info
        run: |
          echo "Current branch: ${{ github.ref }}"
          echo "Event name: ${{ github.event_name }}"
          echo "Before SHA: ${{ github.event.before }}"
          echo "After SHA: ${{ github.event.after }}"
          echo "Current directory files:"
          ls -la
          echo "Annual Security Reports directory:"
          ls -la "Annual Security Reports" || echo "Directory not found"

      - name: Find security report files to scan
        id: changed-files
        run: |
          # Find both added (A) and modified (M) files
          echo "FILES_TO_SCAN<<EOF" >> $GITHUB_ENV
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }} | 
            grep -E "^[AM].*Annual Security Reports/.*(\.pdf|\.docx|\.pptx)$" | 
            cut -f2 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Show all detected changed files for debugging
          echo "All changed files:"
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }}
          
          # Count files to scan
          count=$(git diff --name-status ${{ github.event.before }} ${{ github.event.after }} | 
            grep -E "^[AM].*Annual Security Reports/.*(\.pdf|\.docx|\.pptx)$" | 
            wc -l)
          echo "Found $count files to scan"
          
          # List files to scan for debugging
          echo "Files marked for scanning:"
          git diff --name-status ${{ github.event.before }} ${{ github.event.after }} | 
            grep -E "^[AM].*Annual Security Reports/.*(\.pdf|\.docx|\.pptx)$" | 
            cut -f2

      - name: Fall back to manual file detection if nothing found
        if: ${{ !env.FILES_TO_SCAN }}
        run: |
          echo "No files detected via git diff, trying manual detection..."
          echo "FILES_TO_SCAN<<EOF" >> $GITHUB_ENV
          find "Annual Security Reports" -type f -name "*.pdf" -o -name "*.docx" -o -name "*.pptx" | head -n 5 >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Show detected files
          echo "Files detected manually:"
          find "Annual Security Reports" -type f -name "*.pdf" -o -name "*.docx" -o -name "*.pptx" | head -n 5

      - name: Check for files to scan
        id: check-files
        run: |
          if [ -z "${{ env.FILES_TO_SCAN }}" ]; then
            echo "No security report files found to scan."
            echo "SHOULD_SCAN=false" >> $GITHUB_ENV
          else
            echo "Found files to scan. Will proceed with security scanning."
            echo "SHOULD_SCAN=true" >> $GITHUB_ENV
          fi

      - name: Run security scan and update commit notes
        if: env.SHOULD_SCAN == 'true'
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
          FILES_TO_SCAN: ${{ env.FILES_TO_SCAN }}
        run: |
          cat > scan_and_annotate.py << 'EOL'
          #!/usr/bin/env python3
          """
          Hybrid Analysis Scanner with commit note annotation
          """
          import os
          import sys
          import time
          import json
          import requests
          import subprocess
          import logging
          
          # Configure logging
          logging.basicConfig(
              level=logging.INFO,
              format='%(asctime)s - %(levelname)s - %(message)s'
          )
          
          def submit_file(file_path, api_key):
              """Submit a file to Hybrid Analysis and return job details"""
              logging.info(f"Submitting: {file_path}")
              
              if not os.path.exists(file_path):
                  logging.error(f"File not found: {file_path}")
                  return None
                  
              url = "https://www.hybrid-analysis.com/api/v2/submit/file"
              
              headers = {
                  "api-key": api_key,
                  "User-Agent": "Hybrid Analysis GitHub Action",
                  "Accept": "application/json"
              }
              
              with open(file_path, 'rb') as f:
                  files = {'file': (os.path.basename(file_path), f)}
                  data = {
                      "environment_id": "400",  # Windows 11 64-bit
                      "comment": "GitHub Security Scan"
                  }
                  
                  try:
                      response = requests.post(url, headers=headers, files=files, data=data)
                      response.raise_for_status()
                      return response.json()
                  except requests.exceptions.RequestException as e:
                      logging.error(f"Error submitting file: {e}")
                      if hasattr(e, 'response') and e.response:
                          try:
                              logging.error(f"Error details: {e.response.json()}")
                          except:
                              logging.error(f"Error response: {e.response.text}")
                      return None
          
          def check_report_status(job_id, api_key):
              """Check analysis status"""
              url = f"https://www.hybrid-analysis.com/api/v2/report/{job_id}/summary"
              
              headers = {
                  "api-key": api_key,
                  "User-Agent": "Hybrid Analysis GitHub Action",
                  "Accept": "application/json"
              }
              
              try:
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      return response.json()
                  return None
              except:
                  return None
          
          def add_github_annotation(file_path, report_url, verdict, threat_score):
              """Add GitHub workflow annotation with scan results"""
              verdict_suffix = ""
              if verdict.lower() == "malicious":
                  level = "error"
                  verdict_suffix = "⚠️ MALICIOUS"
              elif verdict.lower() == "suspicious":
                  level = "warning"
                  verdict_suffix = "⚠️ SUSPICIOUS"
              else:
                  level = "notice"
                  
              message = f"Security Scan ({verdict}{verdict_suffix}): Threat Score {threat_score}/100"
              
              # Add the annotation that will appear in the GitHub Actions UI
              print(f"::workflow-command {level} file={file_path}::{message}")
              print(f"::workflow-command {level} file={file_path}::Hybrid Analysis Report: {report_url}")
              
              return True
          
          def add_commit_note(file_path, report_url, verdict, threat_score):
              """Add scan results to the commit notes for the file"""
              try:
                  # Get the file's commit hash
                  result = subprocess.run(
                      ["git", "log", "-n", "1", "--pretty=format:%H", "--", file_path],
                      capture_output=True, text=True, check=True
                  )
                  commit_hash = result.stdout.strip()
                  
                  if not commit_hash:
                      logging.error(f"Could not get commit hash for {file_path}")
                      return False
                  
                  # Format the note message
                  note_msg = f"Security Scan Results: {verdict} (Score: {threat_score}/100) - {report_url}"
                  
                  # Add note to the commit
                  subprocess.run([
                      "git", "notes", "--ref=security-scan", "add", "-m", 
                      note_msg, commit_hash
                  ], check=True)
                  
                  # Push the note to the repository
                  subprocess.run([
                      "git", "push", "origin", "refs/notes/security-scan"
                  ], check=True)
                  
                  logging.info(f"Added commit note to {file_path} (commit {commit_hash}): {note_msg}")
                  
                  # Also add a GitHub workflow annotation
                  add_github_annotation(file_path, report_url, verdict, threat_score)
                  
                  return True
              except subprocess.CalledProcessError as e:
                  logging.error(f"Failed to add commit note: {e}")
                  logging.error(f"Command output: {e.stdout} - {e.stderr}")
                  
                  # Even if git notes fail, still add the annotation
                  add_github_annotation(file_path, report_url, verdict, threat_score)
                  
                  return False
          
          def process_file(file_path, api_key):
              """Process a file and add commit notes with results"""
              logging.info(f"Processing: {file_path}")
              
              # Submit file
              submission = submit_file(file_path, api_key)
              
              if not submission:
                  logging.error("Submission failed")
                  return False
                  
              # Get job ID or SHA256 for checking results
              job_id = submission.get('job_id')
              sha256 = submission.get('sha256')
              
              if not job_id and not sha256:
                  logging.error("No job ID or SHA256 in response")
                  return False
              
              # If we have SHA256 but no job ID, use the direct report URL
              if sha256 and not job_id:
                  report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                  logging.info(f"Direct report URL: {report_url}")
                  # Add placeholder commit note with link but no verdict
                  return add_commit_note(file_path, report_url, "Pending", 0)
              
              # Poll for results with reasonable timeout
              logging.info(f"Waiting for analysis to complete (job_id: {job_id})...")
              
              for attempt in range(1, 6):  # 5 attempts max
                  logging.info(f"Checking status (attempt {attempt}/5)...")
                  time.sleep(30)  # Wait between checks
                  
                  report = check_report_status(job_id, api_key)
                  
                  if not report:
                      continue
                  
                  status = report.get('state', '')
                  
                  if status == 'SUCCESS':
                      # Extract results
                      threat_score = report.get('threat_score', 0)
                      verdict = report.get('verdict', 'Unknown')
                      
                      logging.info(f"Results: Threat Score: {threat_score}/100, Verdict: {verdict}")
                      
                      # Get report URL using SHA256 from the report or submission
                      report_sha256 = report.get('sha256') or sha256
                      report_url = f"https://www.hybrid-analysis.com/sample/{report_sha256}"
                      
                      # Add results to commit notes
                      return add_commit_note(file_path, report_url, verdict, threat_score)
                  
                  elif status == 'ERROR':
                      error_msg = report.get('error', 'Unknown error')
                      logging.error(f"Analysis failed: {error_msg}")
                      return False
              
              # If we reach here, analysis is still pending
              report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
              return add_commit_note(file_path, report_url, "Pending", 0)
          
          def main():
              # Configure Git for notes
              subprocess.run(["git", "config", "--global", "user.email", "github-actions@github.com"])
              subprocess.run(["git", "config", "--global", "user.name", "GitHub Actions"])
              
              # Get API key from environment
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  logging.error("HYBRID_ANALYSIS_API_KEY not found in environment")
                  return 1
              
              # Get list of files to process
              files_to_process = os.environ.get('FILES_TO_SCAN', '').strip().split('\n')
              files_to_process = [f for f in files_to_process if f.strip()]
              
              if not files_to_process:
                  logging.info("No files to process")
                  return 0
              
              logging.info(f"Processing {len(files_to_process)} files")
              
              # Test API connectivity
              logging.info("Testing API connectivity")
              try:
                  headers = {
                      "api-key": api_key,
                      "User-Agent": "Hybrid Analysis GitHub Action",
                      "Accept": "application/json"
                  }
                  response = requests.get(
                      "https://www.hybrid-analysis.com/api/v2/key/current", 
                      headers=headers
                  )
                  response.raise_for_status()
                  logging.info("API connection successful")
              except Exception as e:
                  logging.error(f"API connection failed: {e}")
                  return 1
              
              # Process each file
              results = []
              for file_path in files_to_process:
                  result = process_file(file_path, api_key)
                  results.append(result)
              
              # Return exit code based on results
              return 0 if all(results) else 1
          
          if __name__ == "__main__":
              try:
                  exit_code = main()
                  sys.exit(exit_code)
              except Exception as e:
                  logging.error(f"Unhandled error: {str(e)}")
                  sys.exit(1)
          EOL
          
          # Make script executable
          chmod +x scan_and_annotate.py
          
          # Run the scan and annotation script
          python scan_and_annotate.py

      - name: Skip scan message
        if: env.SHOULD_SCAN != 'true'
        run: |
          echo "No security reports to scan. Skipping the security scan."