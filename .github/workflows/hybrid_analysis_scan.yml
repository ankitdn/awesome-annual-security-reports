name: Hybrid Analysis Security Scan

on:
  push:
    branches:
      - main
      - development
    paths:
      - 'Annual Security Reports/**'

jobs:
  security-scan:
    runs-on: ubuntu-latest
    name: Scan Security Reports
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Just enough to see the changes
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          
      - name: Install dependencies
        run: pip install requests

      - name: Find changed files
        id: find-files
        run: |
          # Get only renamed, added, or modified files in the push
          echo "CHANGED_FILES<<EOF" >> $GITHUB_ENV
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Count for logging
          COUNT=$(git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" | wc -l || echo 0)
          
          echo "Found $COUNT changed security report files"
          
          # Show the files found
          git diff --diff-filter=RAM --name-only ${{ github.event.before || 'HEAD~1' }} ${{ github.event.after || 'HEAD' }} | 
            grep -E "Annual Security Reports/.+\.(pdf|docx|pptx)$" || echo "No files found"

      - name: Scan changed files with Hybrid Analysis
        if: env.CHANGED_FILES != ''
        env:
          HYBRID_ANALYSIS_API_KEY: ${{ secrets.HYBRID_ANALYSIS_API_KEY }}
        run: |
          cat > scan.py << 'EOF'
          #!/usr/bin/env python3
          
          import os
          import sys
          import time
          import requests
          import json
          
          # Constants
          API_BASE_URL = "https://www.hybrid-analysis.com/api/v2"
          
          def scan_file(file_path, api_key):
              """Scan a file with Hybrid Analysis and create annotation with results"""
              # Check if file exists
              if not os.path.exists(file_path):
                  print(f"Error: File not found: {file_path}")
                  return False
              
              try:
                  # Setup API headers
                  headers = {
                      "api-key": api_key,
                      "User-Agent": "Falcon Sandbox GitHub Action",
                      "Accept": "application/json"
                  }
                  
                  # Get file size (in MB) for logging
                  file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
                  print(f"File: {os.path.basename(file_path)} ({file_size_mb:.2f} MB)")
                  
                  # Submit file for quick scan
                  print("Submitting file for quick scan...")
                  with open(file_path, 'rb') as f:
                      # Submit for quick scan with optimal scanning options
                      # Use all available scanners for a complete analysis
                      files = {'file': (os.path.basename(file_path), f)}
                      data = {
                          "scan_type": "all_scan",  # Only use scanners, not lookups which require higher privileges
                          "comment": "GitHub Security Scan",
                          "submit_name": os.path.basename(file_path)
                      }
                      
                      # Submit the file
                      response = requests.post(
                          f"{API_BASE_URL}/quick-scan/file",
                          headers=headers,
                          files=files,
                          data=data,
                          timeout=180  # 3-minute timeout for upload
                      )
                  
                  # API should return status 200 or 201 for success
                  if response.status_code not in [200, 201]:
                      print(f"Error: Quick scan submission failed with status {response.status_code}")
                      print(f"Response: {response.text}")
                      return False
                  
                  # Get the scan details
                  submission = response.json()
                  scan_id = submission.get('id')
                  sha256 = submission.get('sha256')
                  finished = submission.get('finished', False)
                  
                  if not scan_id or not sha256:
                      print("Error: No scan ID or SHA256 in submission response")
                      return False
                  
                  print(f"File submitted successfully. Scan ID: {scan_id}, SHA256: {sha256}")
                  
                  # If the scan is not finished, we need to wait and poll for results
                  if not finished:
                      print("Scan in progress. Waiting for results...")
                      
                      # Wait and poll for results - up to 2 minutes
                      wait_times = [5, 15, 30, 60]  # Total: 110 seconds
                      
                      for attempt, wait_time in enumerate(wait_times, 1):
                          if attempt > 1:
                              print(f"Waiting {wait_time} seconds before next check...")
                              time.sleep(wait_time)
                          
                          print(f"Checking status (attempt {attempt}/{len(wait_times)})...")
                          
                          try:
                              # Note: The endpoint should return 200 (not 201) based on our test
                              status_response = requests.get(
                                  f"{API_BASE_URL}/quick-scan/{scan_id}",
                                  headers=headers,
                                  timeout=30
                              )
                              
                              # Important! API actually returns 200 for success, not 201
                              if status_response.status_code != 200:
                                  print(f"Warning: Status check failed with code {status_response.status_code}")
                                  print(f"Response: {status_response.text}")
                                  continue
                              
                              result = status_response.json()
                              print(f"Status response received:")
                              
                              # Check if scan is finished
                              if result.get('finished', False):
                                  print("Scan completed!")
                                  submission = result  # Update with latest results
                                  finished = True
                                  break
                              
                              print("Scan still in progress...")
                          except Exception as e:
                              print(f"Error checking scan status: {e}")
                  
                  # Get report URL - always available even if scan is still pending
                  report_url = f"https://www.hybrid-analysis.com/sample/{sha256}"
                  
                  # Process results
                  verdict = "No Threat Detected"
                  threat_score = 0
                  
                  # Process scanners_v2 results
                  scanners_v2 = submission.get('scanners_v2', {})
                  
                  # Check for threats in each scanner
                  threats_found = []
                  
                  for scanner_name, scanner_data in scanners_v2.items():
                      if scanner_data and scanner_data.get('status') in ['malicious', 'suspicious']:
                          scanner_readable_name = scanner_data.get('name', scanner_name)
                          status = scanner_data.get('status')
                          threats_found.append(f"{scanner_readable_name}: {status}")
                  
                  # Set verdict based on threats found
                  if threats_found:
                      if any('malicious' in threat.lower() for threat in threats_found):
                          verdict = "Malicious"
                          threat_score = 80
                      else:
                          verdict = "Suspicious"
                          threat_score = 50
                      
                      print(f"Threats detected: {', '.join(threats_found)}")
                  else:
                      print("No threats detected")
                  
                  # Create annotation
                  create_annotation(file_path, verdict, threat_score, report_url)
                  
                  return {
                      "file": os.path.basename(file_path),
                      "verdict": verdict,
                      "threat_score": threat_score,
                      "report_url": report_url,
                      "sha256": sha256,
                      "threats": threats_found
                  }
                  
              except Exception as e:
                  print(f"Error scanning file: {str(e)}")
                  import traceback
                  traceback.print_exc()
                  return False
          
          def create_annotation(file_path, verdict, threat_score, report_url):
              """Create GitHub annotation with scan results"""
              # Determine annotation level and icon
              if verdict.lower() == "malicious":
                  level = "error"
                  icon = "🔴"
              elif verdict.lower() == "suspicious":
                  level = "warning"
                  icon = "🟠"
              else:
                  level = "notice"
                  icon = "✅"
              
              # Format annotation text
              message = f"Security Scan: {verdict} {icon} (Score: {threat_score}/100)"
              
              # Create GitHub annotations
              print(f"::{level} file={file_path}::{message}")
              print(f"::{level} file={file_path}::Report: {report_url}")
              
              return True
          
          def main():
              # Get API key
              api_key = os.environ.get('HYBRID_ANALYSIS_API_KEY')
              if not api_key:
                  print("Error: HYBRID_ANALYSIS_API_KEY environment variable not set")
                  return 1
              
              # Get changed files from environment
              changed_files = os.environ.get('CHANGED_FILES', '').strip().split('\n')
              changed_files = [f for f in changed_files if f.strip()]
              
              if not changed_files:
                  print("No changed files to scan")
                  return 0
              
              print(f"Processing {len(changed_files)} changed files")
              
              # Initialize summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'w') as f:
                  f.write("## 🔍 Hybrid Analysis Security Scan Results\n\n")
              
              # Process each file
              results = []
              success_count = 0
              
              for file_path in changed_files:
                  print(f"\n--- Scanning: {file_path} ---")
                  
                  result = scan_file(file_path, api_key)
                  if result:
                      results.append(result)
                      success_count += 1
                  
                  print(f"--- Completed: {file_path} ---\n")
              
              # Write detailed results to summary
              with open(os.environ.get('GITHUB_STEP_SUMMARY', 'summary.md'), 'a') as f:
                  if results:
                      f.write("| File | Verdict | Threats Found | Report |\n")
                      f.write("|------|---------|---------------|--------|\n")
                      
                      for result in results:
                          # Set icon based on verdict
                          icon = ""
                          verdict = result["verdict"]
                          
                          if "malicious" in verdict.lower():
                              icon = "🔴 "
                          elif "suspicious" in verdict.lower():
                              icon = "🟠 "
                          else:
                              icon = "✅ "
                          
                          # Format threats list
                          threats = result.get("threats", [])
                          threats_text = ", ".join(threats) if threats else "None"
                          
                          f.write(f"| {result['file']} | {icon}{verdict} | {threats_text} | [View Report]({result['report_url']}) |\n")
                  else:
                      f.write("No files were successfully scanned.\n")
                  
                  f.write(f"\n\n### Summary\n")
                  f.write(f"- Successfully processed {success_count} out of {len(changed_files)} files\n")
                  
                  # Add additional info about Hybrid Analysis
                  f.write("\n### About the Scan\n")
                  f.write("- Files are scanned using Hybrid Analysis Quick Scan capability\n")
                  f.write("- Multiple security engines are used including CrowdStrike ML and Metadefender\n")
                  f.write("- Visit the report links for complete details and to download the files if needed\n")
              
              # Return success if at least one file was processed
              return 0 if success_count > 0 else 1
          
          if __name__ == "__main__":
              sys.exit(main())
          EOF
          
          # Make script executable and run
          chmod +x scan.py
          python scan.py || echo "Scan completed with some issues, but continuing workflow"

      - name: No files to scan message
        if: env.CHANGED_FILES == ''
        run: |
          echo "No security report files were added or modified in this push."
          echo "## Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No security report files were changed in this push." >> $GITHUB_STEP_SUMMARY