name: PDF to Markdown Conversion

on:
  push:
    branches: [main, development]
    paths:
      - 'Annual Security Reports/**/*.pdf'
  pull_request:
    branches: [main, development]
    paths:
      - 'Annual Security Reports/**/*.pdf'
  workflow_dispatch:

jobs:
  convert-pdf-to-markdown:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install 'markitdown[pdf]' google-generativeai
      
      - name: Find changed PDF files
        id: find-pdfs
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # For pull requests
            CHANGED_FILES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} | grep -E "Annual Security Reports/.*\.pdf$" || true)
          elif [[ -n "${{ github.event.before }}" && "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]]; then
            # For direct pushes
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} | grep -E "Annual Security Reports/.*\.pdf$" || true)
          else
            # For manual runs or initial pushes
            CHANGED_FILES=$(find "Annual Security Reports" -name "*.pdf" 2>/dev/null || true)
          fi
          
          if [[ -z "$CHANGED_FILES" ]]; then
            echo "No PDF files found. Exiting."
            echo "pdfs_changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          echo "pdfs_changed=true" >> $GITHUB_OUTPUT
          echo "pdf_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create prompt file if needed
        run: |
          PROMPT_PATH=".github/ai_prompts/pdf_to_markdown_prompt.md"
          mkdir -p $(dirname "$PROMPT_PATH")
          if [ ! -f "$PROMPT_PATH" ]; then
            echo "# PDF to Markdown Conversion Prompt" > "$PROMPT_PATH"
            echo "" >> "$PROMPT_PATH"
            echo "Please convert the provided PDF text content into well-formatted Markdown." >> "$PROMPT_PATH"
            echo "" >> "$PROMPT_PATH"
            echo "Follow these guidelines:" >> "$PROMPT_PATH"
            echo "1. Preserve the document structure with headings" >> "$PROMPT_PATH"
            echo "2. Maintain bullet points and numbered lists" >> "$PROMPT_PATH"
            echo "3. Preserve tables using Markdown table format" >> "$PROMPT_PATH"
            echo "4. Keep the same paragraph structure as the original" >> "$PROMPT_PATH"
            echo "" >> "$PROMPT_PATH"
            echo "Return only the converted Markdown without commentary." >> "$PROMPT_PATH"
            
            git config user.name "GitHub Action"
            git config user.email "action@github.com"
            git add "$PROMPT_PATH"
            git commit -m "Create default PDF to Markdown prompt file v1.0"
            git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:${GITHUB_REF}
          fi
      
      - name: Get prompt version
        id: get-prompt-version
        if: steps.find-pdfs.outputs.pdfs_changed == 'true'
        run: |
          PROMPT_PATH=".github/ai_prompts/pdf_to_markdown_prompt.md"
          PROMPT_VERSION=$(git log -n 1 --pretty=format:"%s" -- "$PROMPT_PATH" | grep -oP "v\d+\.\d+(\.\d+)?" || echo "v1.0")
          echo "prompt_version=$PROMPT_VERSION" >> $GITHUB_OUTPUT
      
      - name: Create Python script
        run: |
          cat > process_pdfs.py << 'ENDPYTHONSCRIPT'
          import os
          import sys
          import google.generativeai as genai
          from pathlib import Path
          import subprocess
          from markitdown import MarkItDown
          
          # Setup Gemini API
          genai.configure(api_key=os.environ["GEMINI_API_KEY"])
          
          # Define models to try in order of preference - flash models only as requested
          MODELS = ["gemini-2.5-flash", "gemini-2.0-flash", "gemini-1.5-flash"]
          
          # Get the first available model
          MODEL = None
          for model in MODELS:
              try:
                  genai.GenerativeModel(model)
                  MODEL = model
                  print(f"Using model: {MODEL}")
                  break
              except Exception as e:
                  print(f"Model {model} not available: {e}")
                  continue
          
          if not MODEL:
              print("No models available. Exiting.")
              sys.exit(1)
          
          def read_prompt_file(path):
              with open(path, "r") as file:
                  return file.read()
          
          def extract_text_from_pdf(pdf_path):
              # Use markitdown to extract text from PDF
              md = MarkItDown(enable_plugins=False)
              result = md.convert(str(pdf_path))
              return result.text_content
          
          def generate_markdown_with_ai(pdf_text, prompt_text):
              model = genai.GenerativeModel(MODEL)
              full_prompt = f"{prompt_text}\n\nHere is the PDF content to convert:\n\n{pdf_text}"
              response = model.generate_content(full_prompt)
              return response.text
          
          def process_pdf(pdf_path, prompt_path, prompt_version):
              print(f"Processing: {pdf_path}")
              
              # Read the prompt
              prompt_text = read_prompt_file(prompt_path)
              
              # Extract text from PDF using markitdown
              pdf_text = extract_text_from_pdf(pdf_path)
              
              # Generate markdown with Gemini
              markdown_content = generate_markdown_with_ai(pdf_text, prompt_text)
              
              # Save markdown file
              relative_path = pdf_path.relative_to(Path("Annual Security Reports"))
              output_dir = Path("Markdown Conversions") / relative_path.parent
              output_path = output_dir / f"{pdf_path.stem}.md"
              
              os.makedirs(output_dir, exist_ok=True)
              
              with open(output_path, "w", encoding="utf-8") as f:
                  f.write(markdown_content)
              
              print(f"Created: {output_path}")
              
              # Commit the file
              commit_message = f"Converted {pdf_path.name} using AI Prompt {prompt_version} (Model {MODEL})"
              subprocess.run(["git", "config", "user.name", "GitHub Action"], check=True)
              subprocess.run(["git", "config", "user.email", "action@github.com"], check=True)
              subprocess.run(["git", "add", str(output_path)], check=True)
              subprocess.run(["git", "commit", "-m", commit_message], check=True)
              
              return True
          
          def main():
              pdf_paths_file = sys.argv[1]
              prompt_path = sys.argv[2]
              prompt_version = sys.argv[3]
              
              # Read PDF paths
              with open(pdf_paths_file, "r") as f:
                  pdf_paths = [line.strip() for line in f.readlines()]
              
              print(f"Processing {len(pdf_paths)} PDF files")
              
              success_count = 0
              
              # Process each PDF
              for pdf_path_str in pdf_paths:
                  pdf_path = Path(pdf_path_str)
                  try:
                      if process_pdf(pdf_path, prompt_path, prompt_version):
                          success_count += 1
                  except Exception as e:
                      print(f"Error processing {pdf_path}: {e}")
              
              print(f"Successfully processed {success_count}/{len(pdf_paths)} PDFs")
              return 0 if success_count > 0 else 1
          
          if __name__ == "__main__":
              sys.exit(main())
          ENDPYTHONSCRIPT

      - name: Process PDF files
        if: steps.find-pdfs.outputs.pdfs_changed == 'true'
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          PROMPT_VERSION: ${{ steps.get-prompt-version.outputs.prompt_version }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Create a file with the list of PDF paths
          echo "${{ steps.find-pdfs.outputs.pdf_files }}" > pdf_paths.txt
          
          # Run the Python script
          python process_pdfs.py pdf_paths.txt ".github/ai_prompts/pdf_to_markdown_prompt.md" "$PROMPT_VERSION"
          
          # Push changes
          git push https://${GITHUB_ACTOR}:${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git HEAD:${GITHUB_REF}