name: PDF Detection and Scanning

on:
  push:
    branches:
      - development
    paths:
      - 'Annual Security Reports/**/*.pdf'

jobs:
  detect-and-scan:
    runs-on: ubuntu-latest
    outputs:
      pdf_path: ${{ steps.find-pdf.outputs.pdf_path }}
      pdf_name: ${{ steps.find-pdf.outputs.pdf_name }}
      scan_result: ${{ steps.virus-scan.outputs.scan_result }}
      scan_url: ${{ steps.virus-scan.outputs.scan_url }}
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Find changed PDF files
        id: find-pdf
        run: |
          # Get list of changed files
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | grep -E 'Annual Security Reports/.+\.pdf$' || echo "")
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "No PDF files found in Annual Security Reports directory"
            exit 1
          fi
          
          # Use the first PDF file found (if multiple were uploaded)
          PDF_PATH=$(echo "$CHANGED_FILES" | head -n 1)
          PDF_NAME=$(basename "$PDF_PATH")
          YEAR_DIR=$(dirname "$PDF_PATH" | xargs basename)
          
          echo "Found PDF: $PDF_PATH"
          echo "pdf_path=$PDF_PATH" >> $GITHUB_OUTPUT
          echo "pdf_name=$PDF_NAME" >> $GITHUB_OUTPUT
          echo "year_dir=$YEAR_DIR" >> $GITHUB_OUTPUT

      - name: Upload to Hybrid Analysis
        id: virus-scan
        run: |
          # Install curl if not available
          sudo apt-get update && sudo apt-get install -y curl
          
          # Set API key from secrets
          HYBRID_ANALYSIS_API_KEY="${{ secrets.HYBRID_ANALYSIS_API_KEY }}"
          
          if [ -z "$HYBRID_ANALYSIS_API_KEY" ]; then
            echo "Error: HYBRID_ANALYSIS_API_KEY is not set in repository secrets"
            exit 1
          fi
          
          # Upload file to Hybrid Analysis
          echo "Uploading ${{ steps.find-pdf.outputs.pdf_path }} to Hybrid Analysis..."
          
          RESPONSE=$(curl -X POST \
            https://www.hybrid-analysis.com/api/v2/submit/file \
            -H "api-key: $HYBRID_ANALYSIS_API_KEY" \
            -H "accept: application/json" \
            -H "user-agent: Falcon Sandbox" \
            -F "file=@${{ steps.find-pdf.outputs.pdf_path }}" \
            -F "environment_id=100" \
            -F "allow_community_access=false")
          
          JOB_ID=$(echo $RESPONSE | jq -r '.job_id')
          
          if [ -z "$JOB_ID" ] || [ "$JOB_ID" == "null" ]; then
            echo "Error: Failed to submit file for analysis"
            echo "Response: $RESPONSE"
            exit 1
          fi
          
          echo "Hybrid Analysis Job ID: $JOB_ID"
          
          # Wait for analysis to complete (poll status)
          MAX_ATTEMPTS=30
          ATTEMPTS=0
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            ATTEMPTS=$((ATTEMPTS+1))
            
            STATUS=$(curl -X GET \
              "https://www.hybrid-analysis.com/api/v2/report/$JOB_ID/summary" \
              -H "api-key: $HYBRID_ANALYSIS_API_KEY" \
              -H "accept: application/json" \
              -H "user-agent: Falcon Sandbox")
            
            STATE=$(echo $STATUS | jq -r '.state')
            
            if [ "$STATE" == "SUCCESS" ]; then
              echo "Analysis completed successfully"
              break
            elif [ "$STATE" == "ERROR" ] || [ "$STATE" == "FAILED" ]; then
              echo "Analysis failed: $STATUS"
              exit 1
            else
              echo "Analysis in progress ($STATE), waiting..."
              sleep 30
            fi
          done
          
          if [ $ATTEMPTS -ge $MAX_ATTEMPTS ]; then
            echo "Timeout waiting for analysis to complete"
            exit 1
          fi
          
          # Get verdict
          VERDICT=$(echo $STATUS | jq -r '.verdict')
          SCAN_URL="https://www.hybrid-analysis.com/sample/$JOB_ID"
          
          echo "Hybrid Analysis verdict: $VERDICT"
          echo "Scan URL: $SCAN_URL"
          
          echo "scan_result=$VERDICT" >> $GITHUB_OUTPUT
          echo "scan_url=$SCAN_URL" >> $GITHUB_OUTPUT

      - name: Upload scan results as artifact
        uses: actions/upload-artifact@v3
        with:
          name: virus-scan-results
          path: |
            echo "PDF Path: ${{ steps.find-pdf.outputs.pdf_path }}" > scan-results.txt
            echo "Scan Result: ${{ steps.virus-scan.outputs.scan_result }}" >> scan-results.txt
            echo "Scan URL: ${{ steps.virus-scan.outputs.scan_url }}" >> scan-results.txt

      - name: Trigger conversion workflow if safe
        if: steps.virus-scan.outputs.scan_result == 'no specific threat'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          event-type: pdf-safe-for-conversion
          client-payload: '{"pdf_path": "${{ steps.find-pdf.outputs.pdf_path }}", "pdf_name": "${{ steps.find-pdf.outputs.pdf_name }}", "year_dir": "${{ steps.find-pdf.outputs.year_dir }}"}'
