name: PDF to Markdown Conversion

on:
  repository_dispatch:
    types: [pdf-safe-for-conversion]

jobs:
  convert-to-markdown:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai PyPDF2 requests

      - name: Extract PDF content
        id: extract-pdf
        run: |
          import PyPDF2
          import sys
          import os
          
          # Get PDF path from event payload
          pdf_path = '${{ github.event.client_payload.pdf_path }}'
          
          try:
              # Read PDF content
              pdf_text = ""
              with open(pdf_path, 'rb') as file:
                  pdf_reader = PyPDF2.PdfReader(file)
                  for page_num in range(len(pdf_reader.pages)):
                      page = pdf_reader.pages[page_num]
                      pdf_text += page.extract_text() + "\n\n"
              
              # Save content to file for processing
              with open('pdf_content.txt', 'w', encoding='utf-8') as f:
                  f.write(pdf_text)
              
              print(f"Successfully extracted text from {pdf_path}")
              print(f"::set-output name=extraction_success::true")
          except Exception as e:
              print(f"Error extracting PDF content: {str(e)}")
              print(f"::set-output name=extraction_success::false")
              sys.exit(1)
        shell: python

      - name: Convert to Markdown with Gemini Flash
        id: gemini-flash
        continue-on-error: true
        run: |
          import os
          import google.generativeai as genai
          import time
          
          # Set up API key
          api_key = '${{ secrets.GEMINI_API_KEY }}'
          if not api_key:
              raise ValueError("GEMINI_API_KEY is not set in repository secrets")
          
          genai.configure(api_key=api_key)
          
          # Get prompt content
          with open('AI_PROMPT_MARKDOWN_CONVERT.md', 'r') as f:
              system_prompt = f.read()
          
          # Read PDF content
          with open('pdf_content.txt', 'r', encoding='utf-8') as f:
              pdf_content = f.read()
          
          # Set up Gemini model
          model = genai.GenerativeModel('gemini-2.0-flash')
          
          try:
              # Generate markdown
              response = model.generate_content(
                  system_prompt + "\n\nHere is the PDF content to convert:\n\n" + pdf_content
              )
              
              # Save markdown
              markdown_content = response.text
              output_dir = os.path.join('Markdown Conversions', '${{ github.event.client_payload.year_dir }}')
              os.makedirs(output_dir, exist_ok=True)
              
              output_file = os.path.join(output_dir, '${{ github.event.client_payload.pdf_name }}'.replace('.pdf', '.md'))
              with open(output_file, 'w', encoding='utf-8') as f:
                  f.write(markdown_content)
              
              print(f"Successfully converted to markdown: {output_file}")
              print(f"::set-output name=markdown_path::{output_file}")
              print(f"::set-output name=model_used::gemini-2.0-flash")
              print(f"::set-output name=conversion_success::true")
          except Exception as e:
              print(f"Error with Gemini Flash: {str(e)}")
              print(f"::set-output name=conversion_success::false")
              sys.exit(1)
        shell: python

      - name: Fallback to Gemini Flash Lite
        id: gemini-flash-lite
        if: steps.gemini-flash.outcome == 'failure'
        run: |
          import os
          import google.generativeai as genai
          import time
          
          # Set up API key
          api_key = '${{ secrets.GEMINI_API_KEY }}'
          genai.configure(api_key=api_key)
          
          # Get prompt content
          with open('AI_PROMPT_MARKDOWN_CONVERT.md', 'r') as f:
              system_prompt = f.read()
          
          # Read PDF content
          with open('pdf_content.txt', 'r', encoding='utf-8') as f:
              pdf_content = f.read()
          
          # Set up Gemini model with fallback
          model = genai.GenerativeModel('gemini-2.0-flash-lite')
          
          try:
              # Generate markdown
              response = model.generate_content(
                  system_prompt + "\n\nHere is the PDF content to convert:\n\n" + pdf_content
              )
              
              # Save markdown
              markdown_content = response.text
              output_dir = os.path.join('Markdown Conversions', '${{ github.event.client_payload.year_dir }}')
              os.makedirs(output_dir, exist_ok=True)
              
              output_file = os.path.join(output_dir, '${{ github.event.client_payload.pdf_name }}'.replace('.pdf', '.md'))
              with open(output_file, 'w', encoding='utf-8') as f:
                  f.write(markdown_content)
              
              print(f"Successfully converted to markdown with fallback model: {output_file}")
              print(f"::set-output name=markdown_path::{output_file}")
              print(f"::set-output name=model_used::gemini-2.0-flash-lite")
              print(f"::set-output name=conversion_success::true")
          except Exception as e:
              print(f"Error with Gemini Flash Lite: {str(e)}")
              print(f"::set-output name=conversion_success::false")
              sys.exit(1)
        shell: python

      - name: Commit markdown file
        if: |
          (steps.gemini-flash.outputs.conversion_success == 'true') || 
          (steps.gemini-flash-lite.outputs.conversion_success == 'true')
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
          # Determine which model was used
          if [ "${{ steps.gemini-flash.outputs.conversion_success }}" == "true" ]; then
            MODEL_USED="${{ steps.gemini-flash.outputs.model_used }}"
            MARKDOWN_PATH="${{ steps.gemini-flash.outputs.markdown_path }}"
          else
            MODEL_USED="${{ steps.gemini-flash-lite.outputs.model_used }}"
            MARKDOWN_PATH="${{ steps.gemini-flash-lite.outputs.markdown_path }}"
          fi
          
          git add "$MARKDOWN_PATH"
          git commit -m "Add markdown conversion for ${{ github.event.client_payload.pdf_name }} | AI Prompt V1.0 Model $MODEL_USED"
          git push origin development
