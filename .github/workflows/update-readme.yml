name: Update README with New Reports

on:
  workflow_run:
    workflows: ["PDF to Markdown Conversion"]
    types:
      - completed
    branches: [main, development]
  workflow_dispatch:  # Manual trigger for testing

jobs:
  debug-workflow:
    runs-on: ubuntu-latest
    steps:
      - name: Debug workflow trigger
        run: |
          echo "Workflow triggered successfully"
          echo "Event name: ${{ github.event_name }}"
          if [ "${{ github.event_name }}" == "workflow_run" ]; then
            echo "Triggered by workflow: ${{ github.event.workflow_run.name }}"
            echo "Workflow conclusion: ${{ github.event.workflow_run.conclusion }}"
            echo "Workflow branch: ${{ github.event.workflow_run.head_branch }}"
            echo "Workflow run ID: ${{ github.event.workflow_run.id }}"
          else
            echo "Triggered manually via workflow_dispatch"
          fi

  update-readme:
    needs: debug-workflow
    if: ${{ github.event_name != 'workflow_run' || github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install google-generativeai pyyaml mistune gitpython requests
      
      - name: Determine current branch
        id: branch
        run: |
          CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD || echo ${GITHUB_REF#refs/heads/})
          echo "Current branch: $CURRENT_BRANCH"
          echo "branch=$CURRENT_BRANCH" >> $GITHUB_OUTPUT
      
      - name: Download workflow artifact
        if: github.event_name == 'workflow_run'
        uses: actions/github-script@v7
        id: download
        with:
          script: |
            const fs = require('fs');
            
            // Get the workflow run that triggered this workflow
            const runId = context.payload.workflow_run.id;
            console.log(`Processing workflow run: ${runId}`);
            
            // Get artifacts from the workflow run
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: runId
            });
            
            // Find the artifact (if any) containing the converted file info
            const artifact = artifacts.data.artifacts.find(artifact => artifact.name === 'converted_file_info');
            
            if (!artifact) {
              console.log('No converted_file_info artifact found. Exiting.');
              return false;
            }
            
            // Download the artifact
            const download = await github.rest.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id,
              archive_format: 'zip'
            });
            
            // Write the zip to disk
            fs.writeFileSync('artifact.zip', Buffer.from(download.data));
            
            // Extract the artifact
            await exec.exec('unzip -o artifact.zip -d artifact_contents');
            
            return true;
      
      - name: Find recently converted files
        id: find-files
        if: steps.download.outputs.result == 'true' || github.event_name == 'workflow_dispatch'
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "Manual trigger - creating test file entry"
            mkdir -p artifact_contents
            echo "Markdown Conversions/2025/Test-Report.md" > artifact_contents/converted_files.txt
            cat artifact_contents/converted_files.txt
            echo "files_found=true" >> $GITHUB_OUTPUT
          elif [ -f "artifact_contents/converted_files.txt" ]; then
            echo "recently_converted<<EOF" >> $GITHUB_OUTPUT
            cat artifact_contents/converted_files.txt >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            echo "files_found=true" >> $GITHUB_OUTPUT
            echo "Found recently converted files:"
            cat artifact_contents/converted_files.txt
          else
            echo "files_found=false" >> $GITHUB_OUTPUT
            echo "No recently converted files information found"
          fi
      
      - name: Simple README Update Test
        if: steps.find-files.outputs.files_found == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH: ${{ steps.branch.outputs.branch }}
          GITHUB_REPOSITORY: ${{ github.repository }}
        run: |
          # Simple test - just add a comment to README.md
          echo "# Testing update at $(date)" >> README.md
          
          # Configure git
          git config user.name "GitHub Action"
          git config user.email "action@github.com"
          
          # Create a new branch
          PR_BRANCH="test-readme-update-$(date +%Y%m%d-%H%M%S)"
          git checkout -b $PR_BRANCH
          
          # Add changes
          git add README.md
          
          # Commit changes
          git commit -m "Test README update"
          
          # Push the branch
          git push --set-upstream origin $PR_BRANCH
          
          # Use GitHub API to create PR
          PR_TITLE="Test README Update"
          PR_BODY="This is a test PR created by the workflow."
          
          # Create PR using API
          curl -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/$GITHUB_REPOSITORY/pulls \
            -d "{\"title\":\"$PR_TITLE\",\"body\":\"$PR_BODY\",\"head\":\"$PR_BRANCH\",\"base\":\"$BRANCH\"}"
      
      - name: Upload debug info
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: readme-update-debug
          path: artifact_contents/
          retention-days: 1
          
      - name: Output Results
        if: always()
        run: |
          echo "README update process complete."
          echo "Check created pull requests for the changes."